
SARGE_IMU_CAN_UART_Framework.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d8  080074d8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e0  080074e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080074e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012f60  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f74  20012f74  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001871a  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a87  00000000  00000000  000387a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001578  00000000  00000000  0003c228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010a8  00000000  00000000  0003d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026145  00000000  00000000  0003e848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c816  00000000  00000000  0006498d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e5540  00000000  00000000  000811a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000059bc  00000000  00000000  001666e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  0016c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007458 	.word	0x08007458

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08007458 	.word	0x08007458

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ADIS16475_Init>:
/**
 * @brief  ADIS16475 sensörü başlatır
 * @param  hspi: SPI handle (örnek: &hspi1)
 */
void ADIS16475_Init(SPI_HandleTypeDef *hspi)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    adis_spi = hspi;
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <ADIS16475_Init+0x1c>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000030 	.word	0x20000030

080004ec <ADIS16475_ReadRegister>:
 * @brief  ADIS16475 register'ından 16-bit veri okur
 * @param  reg_addr: okunacak register adresi
 * @retval 16-bit register verisi
 */
uint16_t ADIS16475_ReadRegister(uint8_t reg_addr)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_buf[2];
    uint8_t rx_buf[2];
    uint16_t received = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	81fb      	strh	r3, [r7, #14]

    // İlk SPI aktarımı: register adresi gönderiliyor (okuma için MSB 0 olmalı)
    tx_buf[0] = reg_addr & 0x7F;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000500:	b2db      	uxtb	r3, r3
 8000502:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = 0x00;
 8000504:	2300      	movs	r3, #0
 8000506:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(ADIS16475_CS_GPIO_Port, ADIS16475_CS_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2110      	movs	r1, #16
 800050c:	4823      	ldr	r0, [pc, #140]	; (800059c <ADIS16475_ReadRegister+0xb0>)
 800050e:	f001 ffc1 	bl	8002494 <HAL_GPIO_WritePin>
    if (HAL_SPI_Transmit(adis_spi, tx_buf, 2, HAL_MAX_DELAY) != HAL_OK)
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <ADIS16475_ReadRegister+0xb4>)
 8000514:	6818      	ldr	r0, [r3, #0]
 8000516:	f107 010c 	add.w	r1, r7, #12
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	2202      	movs	r2, #2
 8000520:	f002 fcf3 	bl	8002f0a <HAL_SPI_Transmit>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <ADIS16475_ReadRegister+0x44>
    {
        spi_timeout_flag = 1;  // SPI haberleşme hatası
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <ADIS16475_ReadRegister+0xb8>)
 800052c:	2201      	movs	r2, #1
 800052e:	701a      	strb	r2, [r3, #0]
    }
    HAL_GPIO_WritePin(ADIS16475_CS_GPIO_Port, ADIS16475_CS_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2110      	movs	r1, #16
 8000534:	4819      	ldr	r0, [pc, #100]	; (800059c <ADIS16475_ReadRegister+0xb0>)
 8000536:	f001 ffad 	bl	8002494 <HAL_GPIO_WritePin>

    Delay_Us(15);  // Min. 16 tSCLK delay (datasheet gereği)
 800053a:	200f      	movs	r0, #15
 800053c:	f000 f8b8 	bl	80006b0 <Delay_Us>

    // İkinci SPI aktarımı: veriyi oku
    tx_buf[0] = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	733b      	strb	r3, [r7, #12]
    tx_buf[1] = 0x00;
 8000544:	2300      	movs	r3, #0
 8000546:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(ADIS16475_CS_GPIO_Port, ADIS16475_CS_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2110      	movs	r1, #16
 800054c:	4813      	ldr	r0, [pc, #76]	; (800059c <ADIS16475_ReadRegister+0xb0>)
 800054e:	f001 ffa1 	bl	8002494 <HAL_GPIO_WritePin>
    if (HAL_SPI_TransmitReceive(adis_spi, tx_buf, rx_buf, 2, HAL_MAX_DELAY) != HAL_OK)
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <ADIS16475_ReadRegister+0xb4>)
 8000554:	6818      	ldr	r0, [r3, #0]
 8000556:	f107 0208 	add.w	r2, r7, #8
 800055a:	f107 010c 	add.w	r1, r7, #12
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2302      	movs	r3, #2
 8000566:	f002 fe0c 	bl	8003182 <HAL_SPI_TransmitReceive>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <ADIS16475_ReadRegister+0x8a>
    {
        spi_timeout_flag = 1;  // SPI haberleşme hatası
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <ADIS16475_ReadRegister+0xb8>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
    }
    HAL_GPIO_WritePin(ADIS16475_CS_GPIO_Port, ADIS16475_CS_Pin, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2110      	movs	r1, #16
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <ADIS16475_ReadRegister+0xb0>)
 800057c:	f001 ff8a 	bl	8002494 <HAL_GPIO_WritePin>

    // 16-bit veriyi birleştir
    received = ((uint16_t)rx_buf[0] << 8) | rx_buf[1];
 8000580:	7a3b      	ldrb	r3, [r7, #8]
 8000582:	021b      	lsls	r3, r3, #8
 8000584:	b21a      	sxth	r2, r3
 8000586:	7a7b      	ldrb	r3, [r7, #9]
 8000588:	b21b      	sxth	r3, r3
 800058a:	4313      	orrs	r3, r2
 800058c:	b21b      	sxth	r3, r3
 800058e:	81fb      	strh	r3, [r7, #14]

    return received;
 8000590:	89fb      	ldrh	r3, [r7, #14]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40020000 	.word	0x40020000
 80005a0:	20000030 	.word	0x20000030
 80005a4:	20000140 	.word	0x20000140

080005a8 <ADIS16475_ReadGyro>:
 * @param  gx: X-axis (°/s)
 * @param  gy: Y-axis (°/s)
 * @param  gz: Z-axis (°/s)
 */
void ADIS16475_ReadGyro(float *gx, float *gy, float *gz)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
    int16_t raw_x = (int16_t)ADIS16475_ReadRegister(ADIS16475_X_GYRO_OUT);
 80005b4:	2006      	movs	r0, #6
 80005b6:	f7ff ff99 	bl	80004ec <ADIS16475_ReadRegister>
 80005ba:	4603      	mov	r3, r0
 80005bc:	82fb      	strh	r3, [r7, #22]
    int16_t raw_y = (int16_t)ADIS16475_ReadRegister(ADIS16475_Y_GYRO_OUT);
 80005be:	200a      	movs	r0, #10
 80005c0:	f7ff ff94 	bl	80004ec <ADIS16475_ReadRegister>
 80005c4:	4603      	mov	r3, r0
 80005c6:	82bb      	strh	r3, [r7, #20]
    int16_t raw_z = (int16_t)ADIS16475_ReadRegister(ADIS16475_Z_GYRO_OUT);
 80005c8:	200e      	movs	r0, #14
 80005ca:	f7ff ff8f 	bl	80004ec <ADIS16475_ReadRegister>
 80005ce:	4603      	mov	r3, r0
 80005d0:	827b      	strh	r3, [r7, #18]

    *gx = raw_x * 0.05f;  // Sensör çözünürlüğü: 0.05 °/s per LSB
 80005d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005d6:	ee07 3a90 	vmov	s15, r3
 80005da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005de:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000628 <ADIS16475_ReadGyro+0x80>
 80005e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	edc3 7a00 	vstr	s15, [r3]
    *gy = raw_y * 0.05f;
 80005ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80005f0:	ee07 3a90 	vmov	s15, r3
 80005f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005f8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000628 <ADIS16475_ReadGyro+0x80>
 80005fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	edc3 7a00 	vstr	s15, [r3]
    *gz = raw_z * 0.05f;
 8000606:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800060a:	ee07 3a90 	vmov	s15, r3
 800060e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000612:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000628 <ADIS16475_ReadGyro+0x80>
 8000616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	edc3 7a00 	vstr	s15, [r3]
}
 8000620:	bf00      	nop
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	3d4ccccd 	.word	0x3d4ccccd

0800062c <ADIS16475_ReadAccel>:
 * @param  ax: X-axis (g)
 * @param  ay: Y-axis (g)
 * @param  az: Z-axis (g)
 */
void ADIS16475_ReadAccel(float *ax, float *ay, float *az)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
    int16_t raw_x = (int16_t)ADIS16475_ReadRegister(ADIS16475_X_ACCEL_OUT);
 8000638:	2012      	movs	r0, #18
 800063a:	f7ff ff57 	bl	80004ec <ADIS16475_ReadRegister>
 800063e:	4603      	mov	r3, r0
 8000640:	82fb      	strh	r3, [r7, #22]
    int16_t raw_y = (int16_t)ADIS16475_ReadRegister(ADIS16475_Y_ACCEL_OUT);
 8000642:	2016      	movs	r0, #22
 8000644:	f7ff ff52 	bl	80004ec <ADIS16475_ReadRegister>
 8000648:	4603      	mov	r3, r0
 800064a:	82bb      	strh	r3, [r7, #20]
    int16_t raw_z = (int16_t)ADIS16475_ReadRegister(ADIS16475_Z_ACCEL_OUT);
 800064c:	201a      	movs	r0, #26
 800064e:	f7ff ff4d 	bl	80004ec <ADIS16475_ReadRegister>
 8000652:	4603      	mov	r3, r0
 8000654:	827b      	strh	r3, [r7, #18]

    *ax = raw_x * 0.00025f;  // Sensör çözünürlüğü: 0.25 mg per LSB
 8000656:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800065a:	ee07 3a90 	vmov	s15, r3
 800065e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000662:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80006ac <ADIS16475_ReadAccel+0x80>
 8000666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	edc3 7a00 	vstr	s15, [r3]
    *ay = raw_y * 0.00025f;
 8000670:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000674:	ee07 3a90 	vmov	s15, r3
 8000678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80006ac <ADIS16475_ReadAccel+0x80>
 8000680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	edc3 7a00 	vstr	s15, [r3]
    *az = raw_z * 0.00025f;
 800068a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000696:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80006ac <ADIS16475_ReadAccel+0x80>
 800069a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	edc3 7a00 	vstr	s15, [r3]
}
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	3983126f 	.word	0x3983126f

080006b0 <Delay_Us>:
 * @brief  Mikro-saniye cinsinden gecikme fonksiyonu (NOP tabanlı)
 * @param  us: gecikme süresi (mikrosaniye)
 * @note   Zaman hassasiyeti düşük, kaba bir bekleme sağlar.
 */
void Delay_Us(uint16_t us)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < us * 10; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	81fb      	strh	r3, [r7, #14]
 80006be:	e003      	b.n	80006c8 <Delay_Us+0x18>
    {
        __NOP();  // No operation (CPU’yu boşta beklet)
 80006c0:	bf00      	nop
    for (uint16_t i = 0; i < us * 10; i++)
 80006c2:	89fb      	ldrh	r3, [r7, #14]
 80006c4:	3301      	adds	r3, #1
 80006c6:	81fb      	strh	r3, [r7, #14]
 80006c8:	89f9      	ldrh	r1, [r7, #14]
 80006ca:	88fa      	ldrh	r2, [r7, #6]
 80006cc:	4613      	mov	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4299      	cmp	r1, r3
 80006d6:	dbf3      	blt.n	80006c0 <Delay_Us+0x10>
    }
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <comms_task>:
 * Bu görev her 1 saniyede bir çalışır ve telemetry_packet
 * verisini hem UART hem de CAN üzerinden gönderir.
 * Veri erişimi için mutex kullanılarak thread-safe erişim sağlanır.
 */
void comms_task(void *param)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80006f0:	f004 ffe6 	bl	80056c0 <xTaskGetTickCount>
 80006f4:	4603      	mov	r3, r0
 80006f6:	60bb      	str	r3, [r7, #8]
    const TickType_t xFrequency = pdMS_TO_TICKS(1000); // 1 saniye aralık
 80006f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fc:	60fb      	str	r3, [r7, #12]

    for (;;)
    {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	68f9      	ldr	r1, [r7, #12]
 8000704:	4618      	mov	r0, r3
 8000706:	f004 fdcd 	bl	80052a4 <xTaskDelayUntil>

        // Telemetri verisine güvenli erişim
        if (xSemaphoreTake(xTelemetryMutex, pdMS_TO_TICKS(10)) == pdTRUE)
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <comms_task+0x5c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	210a      	movs	r1, #10
 8000710:	4618      	mov	r0, r3
 8000712:	f004 f9b5 	bl	8004a80 <xQueueSemaphoreTake>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d1f0      	bne.n	80006fe <comms_task+0x16>
        {
            telemetry_packet.timestamp = system_seconds;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <comms_task+0x60>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0a      	ldr	r2, [pc, #40]	; (800074c <comms_task+0x64>)
 8000722:	f8c2 3001 	str.w	r3, [r2, #1]

            send_telemetry_uart(&telemetry_packet);
 8000726:	4809      	ldr	r0, [pc, #36]	; (800074c <comms_task+0x64>)
 8000728:	f000 f812 	bl	8000750 <send_telemetry_uart>
            send_telemetry_can(&telemetry_packet);
 800072c:	4807      	ldr	r0, [pc, #28]	; (800074c <comms_task+0x64>)
 800072e:	f000 f83b 	bl	80007a8 <send_telemetry_can>

            xSemaphoreGive(xTelemetryMutex);
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <comms_task+0x5c>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	2300      	movs	r3, #0
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	f003 ffc2 	bl	80046c4 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000740:	e7dd      	b.n	80006fe <comms_task+0x16>
 8000742:	bf00      	nop
 8000744:	20000158 	.word	0x20000158
 8000748:	20000144 	.word	0x20000144
 800074c:	20000160 	.word	0x20000160

08000750 <send_telemetry_uart>:
 *
 * Bu fonksiyon telemetry_packet'i UART üzerinden gönderir.
 * Gönderilen pakete PORT_UART tanımı eklenir.
 */
static void send_telemetry_uart(const volatile TelemetryPacket_t *packet)
{
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	b08d      	sub	sp, #52	; 0x34
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    TelemetryPacket_t uart_packet = *packet;  // Kopya oluştur
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	461c      	mov	r4, r3
 800075c:	f107 060c 	add.w	r6, r7, #12
 8000760:	f104 0c20 	add.w	ip, r4, #32
 8000764:	4635      	mov	r5, r6
 8000766:	4623      	mov	r3, r4
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	6859      	ldr	r1, [r3, #4]
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000772:	3410      	adds	r4, #16
 8000774:	3610      	adds	r6, #16
 8000776:	4564      	cmp	r4, ip
 8000778:	d1f4      	bne.n	8000764 <send_telemetry_uart+0x14>
 800077a:	4633      	mov	r3, r6
 800077c:	4622      	mov	r2, r4
 800077e:	8811      	ldrh	r1, [r2, #0]
 8000780:	7892      	ldrb	r2, [r2, #2]
 8000782:	8019      	strh	r1, [r3, #0]
 8000784:	709a      	strb	r2, [r3, #2]
    uart_packet.port_id = PORT_UART;          // UART port bilgisi
 8000786:	2301      	movs	r3, #1
 8000788:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    HAL_UART_Transmit(&huart2, (uint8_t *)&uart_packet, sizeof(TelemetryPacket_t), HAL_MAX_DELAY);
 800078c:	f107 010c 	add.w	r1, r7, #12
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	2223      	movs	r2, #35	; 0x23
 8000796:	4803      	ldr	r0, [pc, #12]	; (80007a4 <send_telemetry_uart+0x54>)
 8000798:	f003 fa5b 	bl	8003c52 <HAL_UART_Transmit>
}
 800079c:	bf00      	nop
 800079e:	3734      	adds	r7, #52	; 0x34
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a4:	2000005c 	.word	0x2000005c

080007a8 <send_telemetry_can>:
 * CAN protokolü maksimum 8 byte veri taşıyabildiği için
 * paket parçalanarak 8 byte’lık çerçeveler halinde gönderilir.
 * Her parça CAN Std ID 0x123 ile gönderilir.
 */
static void send_telemetry_can(const volatile TelemetryPacket_t *packet)
{
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	b0a1      	sub	sp, #132	; 0x84
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    TelemetryPacket_t can_packet = *packet;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	461c      	mov	r4, r3
 80007b4:	f107 0654 	add.w	r6, r7, #84	; 0x54
 80007b8:	f104 0c20 	add.w	ip, r4, #32
 80007bc:	4635      	mov	r5, r6
 80007be:	4623      	mov	r3, r4
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	6859      	ldr	r1, [r3, #4]
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ca:	3410      	adds	r4, #16
 80007cc:	3610      	adds	r6, #16
 80007ce:	4564      	cmp	r4, ip
 80007d0:	d1f4      	bne.n	80007bc <send_telemetry_can+0x14>
 80007d2:	4633      	mov	r3, r6
 80007d4:	4622      	mov	r2, r4
 80007d6:	8811      	ldrh	r1, [r2, #0]
 80007d8:	7892      	ldrb	r2, [r2, #2]
 80007da:	8019      	strh	r1, [r3, #0]
 80007dc:	709a      	strb	r2, [r3, #2]
    can_packet.port_id = PORT_CAN;
 80007de:	2302      	movs	r3, #2
 80007e0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint8_t buffer[sizeof(TelemetryPacket_t)];
    memcpy(buffer, &can_packet, sizeof(can_packet));
 80007e4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80007e8:	f107 0554 	add.w	r5, r7, #84	; 0x54
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	682b      	ldr	r3, [r5, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	8022      	strh	r2, [r4, #0]
 80007fa:	3402      	adds	r4, #2
 80007fc:	0c1b      	lsrs	r3, r3, #16
 80007fe:	7023      	strb	r3, [r4, #0]

    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t can_data[8];

    TxHeader.IDE = CAN_ID_STD;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
    TxHeader.StdId = 0x123;
 8000808:	f240 1323 	movw	r3, #291	; 0x123
 800080c:	61bb      	str	r3, [r7, #24]

    uint16_t total_len = sizeof(TelemetryPacket_t);
 800080e:	2323      	movs	r3, #35	; 0x23
 8000810:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint16_t sent_len = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    while (sent_len < total_len)
 800081a:	e048      	b.n	80008ae <send_telemetry_can+0x106>
    {
        uint8_t remain = total_len - sent_len;
 800081c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000820:	b2da      	uxtb	r2, r3
 8000822:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000826:	b2db      	uxtb	r3, r3
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
        uint8_t send_now = remain >= 8 ? 8 : remain;
 800082e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000832:	2b08      	cmp	r3, #8
 8000834:	bf28      	it	cs
 8000836:	2308      	movcs	r3, #8
 8000838:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

        memcpy(can_data, &buffer[sent_len], send_now);
 800083c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000840:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000844:	18d1      	adds	r1, r2, r3
 8000846:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4618      	mov	r0, r3
 8000850:	f006 fdf4 	bl	800743c <memcpy>

        // Eğer 8’den az veri varsa, kalan byte'ları sıfırla
        if (send_now < 8)
 8000854:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000858:	2b07      	cmp	r3, #7
 800085a:	d80c      	bhi.n	8000876 <send_telemetry_can+0xce>
        {
            memset(&can_data[send_now], 0, 8 - send_now);
 800085c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000860:	f107 020c 	add.w	r2, r7, #12
 8000864:	18d0      	adds	r0, r2, r3
 8000866:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800086a:	f1c3 0308 	rsb	r3, r3, #8
 800086e:	461a      	mov	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f006 fdb7 	bl	80073e4 <memset>
        }

        TxHeader.DLC = send_now;
 8000876:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28

        if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, can_data, &TxMailbox) != HAL_OK)
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	f107 020c 	add.w	r2, r7, #12
 8000884:	f107 0118 	add.w	r1, r7, #24
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <send_telemetry_can+0x11c>)
 800088a:	f001 faaa 	bl	8001de2 <HAL_CAN_AddTxMessage>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <send_telemetry_can+0xf0>
        {
            Error_Handler();  // Gönderim hatası
 8000894:	f000 faca 	bl	8000e2c <Error_Handler>
        }

        sent_len += send_now;
 8000898:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800089c:	b29a      	uxth	r2, r3
 800089e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80008a2:	4413      	add	r3, r2
 80008a4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        vTaskDelay(pdMS_TO_TICKS(2));  // CAN verileri arasında küçük bekleme
 80008a8:	2002      	movs	r0, #2
 80008aa:	f004 fd79 	bl	80053a0 <vTaskDelay>
    while (sent_len < total_len)
 80008ae:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80008b2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3b0      	bcc.n	800081c <send_telemetry_can+0x74>
    }
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	3784      	adds	r7, #132	; 0x84
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c4:	20000034 	.word	0x20000034

080008c8 <error_monitor_task>:
 * Bu görev, diğer görevlerden gelen `xTaskNotifyGive()` sinyallerini bekler.
 * Eğer SPI veya sıcaklık ile ilgili hata bayrakları set edilmişse,
 * telemetry_packet.error_flags alanına işlenir ve flag'ler sıfırlanır.
 */
void error_monitor_task(void *param)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        // Bildirim gelene kadar bekle (bloklanır)
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	2101      	movs	r1, #1
 80008d6:	2000      	movs	r0, #0
 80008d8:	f005 fd1a 	bl	8006310 <ulTaskGenericNotifyTake>

        // Telemetri paketine güvenli erişim
        if (xSemaphoreTake(xTelemetryMutex, portMAX_DELAY) == pdTRUE)
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <error_monitor_task+0x80>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 f8cb 	bl	8004a80 <xQueueSemaphoreTake>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d1ef      	bne.n	80008d0 <error_monitor_task+0x8>
        {
            // Sıcaklık hatası oluşmuşsa, ilgili flag'i set et
            if (temp_overunder_flag == 1)
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <error_monitor_task+0x84>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d10c      	bne.n	8000914 <error_monitor_task+0x4c>
            {
                telemetry_packet.error_flags |= ERROR_FLAG_TEMP_OVER_UNDER;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <error_monitor_task+0x88>)
 80008fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <error_monitor_task+0x88>)
 800090a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                temp_overunder_flag = 0;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <error_monitor_task+0x84>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
            }

            // SPI haberleşme hatası oluşmuşsa, ilgili flag'i set et
            if (spi_timeout_flag == 1)
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <error_monitor_task+0x8c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b01      	cmp	r3, #1
 800091c:	d10c      	bne.n	8000938 <error_monitor_task+0x70>
            {
                telemetry_packet.error_flags |= ERROR_FLAG_SPI_TIMEOUT;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <error_monitor_task+0x88>)
 8000920:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <error_monitor_task+0x88>)
 800092e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                spi_timeout_flag = 0;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <error_monitor_task+0x8c>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
            }

            xSemaphoreGive(xTelemetryMutex);
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <error_monitor_task+0x80>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	f003 febf 	bl	80046c4 <xQueueGenericSend>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000946:	e7c3      	b.n	80008d0 <error_monitor_task+0x8>
 8000948:	20000158 	.word	0x20000158
 800094c:	20000141 	.word	0x20000141
 8000950:	20000160 	.word	0x20000160
 8000954:	20000140 	.word	0x20000140

08000958 <TIM6_DAC_IRQHandler>:

extern TIM_HandleTypeDef htim6;


void TIM6_DAC_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim6);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <TIM6_DAC_IRQHandler+0x10>)
 800095e:	f002 ff47 	bl	80037f0 <HAL_TIM_IRQHandler>

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000184 	.word	0x20000184

0800096c <main>:

/**
 * @brief  Uygulamanın giriş noktası (main fonksiyonu)
 */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af02      	add	r7, sp, #8
    // Sistem ve saat konfigürasyonu
    HAL_Init();
 8000972:	f000 fd2d 	bl	80013d0 <HAL_Init>
    SystemClock_Config();
 8000976:	f000 f89f 	bl	8000ab8 <SystemClock_Config>

    // Donanım başlatmaları
    CAN1_Init();
 800097a:	f000 f907 	bl	8000b8c <CAN1_Init>
    UART2_Init();
 800097e:	f000 f971 	bl	8000c64 <UART2_Init>
    TEMP_ADC_Init();
 8000982:	f000 f995 	bl	8000cb0 <TEMP_ADC_Init>
    SPI1_Init();
 8000986:	f000 f937 	bl	8000bf8 <SPI1_Init>
    ADS16475_CSGPIO_Init();
 800098a:	f000 f9f5 	bl	8000d78 <ADS16475_CSGPIO_Init>

    // IMU başlat
    ADIS16475_Init(&hspi1);
 800098e:	483c      	ldr	r0, [pc, #240]	; (8000a80 <main+0x114>)
 8000990:	f7ff fd9c 	bl	80004cc <ADIS16475_Init>

    // Telemetry yapısı sıfırlanır
    telemetry_init();
 8000994:	f000 fbdc 	bl	8001150 <telemetry_init>

    // === Görevler oluşturuluyor ===
    BaseType_t status;

    status = xTaskCreate(sensor_task, "sensor_task", 250, NULL, 2, &handle_sensor_task);
 8000998:	4b3a      	ldr	r3, [pc, #232]	; (8000a84 <main+0x118>)
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	2302      	movs	r3, #2
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2300      	movs	r3, #0
 80009a2:	22fa      	movs	r2, #250	; 0xfa
 80009a4:	4938      	ldr	r1, [pc, #224]	; (8000a88 <main+0x11c>)
 80009a6:	4839      	ldr	r0, [pc, #228]	; (8000a8c <main+0x120>)
 80009a8:	f004 fb12 	bl	8004fd0 <xTaskCreate>
 80009ac:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d00a      	beq.n	80009ca <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80009b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b8:	f383 8811 	msr	BASEPRI, r3
 80009bc:	f3bf 8f6f 	isb	sy
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80009c6:	bf00      	nop
 80009c8:	e7fe      	b.n	80009c8 <main+0x5c>

    status = xTaskCreate(temp_task, "temp_task", 250, NULL, 2, &handle_temp_task);
 80009ca:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <main+0x124>)
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	2302      	movs	r3, #2
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2300      	movs	r3, #0
 80009d4:	22fa      	movs	r2, #250	; 0xfa
 80009d6:	492f      	ldr	r1, [pc, #188]	; (8000a94 <main+0x128>)
 80009d8:	482f      	ldr	r0, [pc, #188]	; (8000a98 <main+0x12c>)
 80009da:	f004 faf9 	bl	8004fd0 <xTaskCreate>
 80009de:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d00a      	beq.n	80009fc <main+0x90>
        __asm volatile
 80009e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ea:	f383 8811 	msr	BASEPRI, r3
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	f3bf 8f4f 	dsb	sy
 80009f6:	60fb      	str	r3, [r7, #12]
    }
 80009f8:	bf00      	nop
 80009fa:	e7fe      	b.n	80009fa <main+0x8e>

    status = xTaskCreate(comms_task, "comms_task", 250, NULL, 2, &handle_comms_task);
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <main+0x130>)
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	2302      	movs	r3, #2
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	22fa      	movs	r2, #250	; 0xfa
 8000a08:	4925      	ldr	r1, [pc, #148]	; (8000aa0 <main+0x134>)
 8000a0a:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <main+0x138>)
 8000a0c:	f004 fae0 	bl	8004fd0 <xTaskCreate>
 8000a10:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d00a      	beq.n	8000a2e <main+0xc2>
        __asm volatile
 8000a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1c:	f383 8811 	msr	BASEPRI, r3
 8000a20:	f3bf 8f6f 	isb	sy
 8000a24:	f3bf 8f4f 	dsb	sy
 8000a28:	60bb      	str	r3, [r7, #8]
    }
 8000a2a:	bf00      	nop
 8000a2c:	e7fe      	b.n	8000a2c <main+0xc0>

    status = xTaskCreate(error_monitor_task, "error_monitor_task", 250, NULL, 2, &handle_error_monitor_task);
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <main+0x13c>)
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	2302      	movs	r3, #2
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	22fa      	movs	r2, #250	; 0xfa
 8000a3a:	491c      	ldr	r1, [pc, #112]	; (8000aac <main+0x140>)
 8000a3c:	481c      	ldr	r0, [pc, #112]	; (8000ab0 <main+0x144>)
 8000a3e:	f004 fac7 	bl	8004fd0 <xTaskCreate>
 8000a42:	6178      	str	r0, [r7, #20]
    configASSERT(status == pdPASS);
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d00a      	beq.n	8000a60 <main+0xf4>
        __asm volatile
 8000a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a4e:	f383 8811 	msr	BASEPRI, r3
 8000a52:	f3bf 8f6f 	isb	sy
 8000a56:	f3bf 8f4f 	dsb	sy
 8000a5a:	607b      	str	r3, [r7, #4]
    }
 8000a5c:	bf00      	nop
 8000a5e:	e7fe      	b.n	8000a5e <main+0xf2>

    // === Mutex oluşturuluyor ===
    xTelemetryMutex = xSemaphoreCreateMutex();
 8000a60:	2001      	movs	r0, #1
 8000a62:	f003 fe16 	bl	8004692 <xQueueCreateMutex>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <main+0x148>)
 8000a6a:	6013      	str	r3, [r2, #0]
    if (xTelemetryMutex == NULL)
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <main+0x148>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <main+0x10c>
    {
        Error_Handler();
 8000a74:	f000 f9da 	bl	8000e2c <Error_Handler>
    }

    // === RTOS başlatılıyor ===
    vTaskStartScheduler();
 8000a78:	f004 fcc6 	bl	8005408 <vTaskStartScheduler>

    // Bu noktaya ulaşılmaz
    for (;;);
 8000a7c:	e7fe      	b.n	8000a7c <main+0x110>
 8000a7e:	bf00      	nop
 8000a80:	200000e8 	.word	0x200000e8
 8000a84:	20000148 	.word	0x20000148
 8000a88:	08007470 	.word	0x08007470
 8000a8c:	08001079 	.word	0x08001079
 8000a90:	2000014c 	.word	0x2000014c
 8000a94:	0800747c 	.word	0x0800747c
 8000a98:	080011d9 	.word	0x080011d9
 8000a9c:	20000150 	.word	0x20000150
 8000aa0:	08007488 	.word	0x08007488
 8000aa4:	080006e9 	.word	0x080006e9
 8000aa8:	20000154 	.word	0x20000154
 8000aac:	08007494 	.word	0x08007494
 8000ab0:	080008c9 	.word	0x080008c9
 8000ab4:	20000158 	.word	0x20000158

08000ab8 <SystemClock_Config>:

/**
 * @brief  STM32 sistem saat konfigürasyonu
 */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	; 0x50
 8000abc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2230      	movs	r2, #48	; 0x30
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f006 fc8c 	bl	80073e4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <SystemClock_Config+0xcc>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <SystemClock_Config+0xcc>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <SystemClock_Config+0xcc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <SystemClock_Config+0xd0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemClock_Config+0xd0>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <SystemClock_Config+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b20:	2302      	movs	r3, #2
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8000b2c:	23a8      	movs	r3, #168	; 0xa8
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b34:	2307      	movs	r3, #7
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fcc3 	bl	80024c8 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x94>
    {
        Error_Handler();
 8000b48:	f000 f970 	bl	8000e2c <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	60fb      	str	r3, [r7, #12]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b5c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 ff24 	bl	80029b8 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0xc2>
    {
        Error_Handler();
 8000b76:	f000 f959 	bl	8000e2c <Error_Handler>
    }
}
 8000b7a:	bf00      	nop
 8000b7c:	3750      	adds	r7, #80	; 0x50
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <CAN1_Init>:

// === Periferik Başlatma Fonksiyonları (CAN, SPI, UART, ADC) ===

static void CAN1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    hcan1.Instance = CAN1;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <CAN1_Init+0x64>)
 8000b92:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <CAN1_Init+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 5;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <CAN1_Init+0x64>)
 8000b98:	2205      	movs	r2, #5
 8000b9a:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <CAN1_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <CAN1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <CAN1_Init+0x64>)
 8000baa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bae:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <CAN1_Init+0x64>)
 8000bb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bb6:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <CAN1_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = DISABLE;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <CAN1_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <CAN1_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = ENABLE;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <CAN1_Init+0x64>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <CAN1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <CAN1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	775a      	strb	r2, [r3, #29]

    if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <CAN1_Init+0x64>)
 8000bde:	f001 f805 	bl	8001bec <HAL_CAN_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <CAN1_Init+0x60>
    {
        Error_Handler();
 8000be8:	f000 f920 	bl	8000e2c <Error_Handler>
    }
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000034 	.word	0x20000034
 8000bf4:	40006400 	.word	0x40006400

08000bf8 <SPI1_Init>:

static void SPI1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <SPI1_Init+0x64>)
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <SPI1_Init+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <SPI1_Init+0x64>)
 8000c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c08:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <SPI1_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <SPI1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <SPI1_Init+0x64>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <SPI1_Init+0x64>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <SPI1_Init+0x64>)
 8000c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c28:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <SPI1_Init+0x64>)
 8000c2c:	2228      	movs	r2, #40	; 0x28
 8000c2e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <SPI1_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <SPI1_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <SPI1_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SPI1_Init+0x64>)
 8000c44:	220a      	movs	r2, #10
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <SPI1_Init+0x64>)
 8000c4a:	f002 f8d5 	bl	8002df8 <HAL_SPI_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SPI1_Init+0x60>
    {
        Error_Handler();
 8000c54:	f000 f8ea 	bl	8000e2c <Error_Handler>
    }
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200000e8 	.word	0x200000e8
 8000c60:	40013000 	.word	0x40013000

08000c64 <UART2_Init>:

static void UART2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <UART2_Init+0x44>)
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <UART2_Init+0x48>)
 8000c6c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <UART2_Init+0x44>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <UART2_Init+0x44>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <UART2_Init+0x44>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <UART2_Init+0x44>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <UART2_Init+0x44>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <UART2_Init+0x44>)
 8000c90:	220c      	movs	r2, #12
 8000c92:	615a      	str	r2, [r3, #20]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <UART2_Init+0x44>)
 8000c96:	f002 ff8f 	bl	8003bb8 <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <UART2_Init+0x40>
    {
        Error_Handler();
 8000ca0:	f000 f8c4 	bl	8000e2c <Error_Handler>
    }
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000005c 	.word	0x2000005c
 8000cac:	40004400 	.word	0x40004400

08000cb0 <TEMP_ADC_Init>:

static void TEMP_ADC_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]

    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <TEMP_ADC_Init+0xb8>)
 8000cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ccc:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <TEMP_ADC_Init+0xb8>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <TEMP_ADC_Init+0xb8>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]

    temp_sensor_adc.Instance = ADC1;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000ce2:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <TEMP_ADC_Init+0xc0>)
 8000ce4:	601a      	str	r2, [r3, #0]
    temp_sensor_adc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000ce8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cec:	605a      	str	r2, [r3, #4]
    temp_sensor_adc.Init.Resolution = ADC_RESOLUTION_12B;
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
    temp_sensor_adc.Init.ScanConvMode = DISABLE;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
    temp_sensor_adc.Init.ContinuousConvMode = ENABLE;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	761a      	strb	r2, [r3, #24]
    temp_sensor_adc.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
    temp_sensor_adc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    temp_sensor_adc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000d10:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <TEMP_ADC_Init+0xc4>)
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
    temp_sensor_adc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
    temp_sensor_adc.Init.NbrOfConversion = 1;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	61da      	str	r2, [r3, #28]
    temp_sensor_adc.Init.DMAContinuousRequests = DISABLE;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    temp_sensor_adc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	615a      	str	r2, [r3, #20]

    if (HAL_ADC_Init(&temp_sensor_adc) != HAL_OK)
 8000d2e:	480f      	ldr	r0, [pc, #60]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000d30:	f000 fb90 	bl	8001454 <HAL_ADC_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <TEMP_ADC_Init+0x8e>
    {
        Error_Handler();
 8000d3a:	f000 f877 	bl	8000e2c <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d46:	2307      	movs	r3, #7
 8000d48:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(&temp_sensor_adc, &sConfig) != HAL_OK)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <TEMP_ADC_Init+0xbc>)
 8000d52:	f000 fd2d 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <TEMP_ADC_Init+0xb0>
    {
        Error_Handler();
 8000d5c:	f000 f866 	bl	8000e2c <Error_Handler>
    }
}
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	200000a0 	.word	0x200000a0
 8000d70:	40012000 	.word	0x40012000
 8000d74:	0f000001 	.word	0x0f000001

08000d78 <ADS16475_CSGPIO_Init>:

static void ADS16475_CSGPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <ADS16475_CSGPIO_Init+0x5c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <ADS16475_CSGPIO_Init+0x5c>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <ADS16475_CSGPIO_Init+0x5c>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = ADIS16475_CS_Pin;
 8000da8:	2310      	movs	r3, #16
 8000daa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(ADIS16475_CS_GPIO_Port, &GPIO_InitStruct);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <ADS16475_CSGPIO_Init+0x60>)
 8000dbe:	f001 f9cd 	bl	800215c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(ADIS16475_CS_GPIO_Port, ADIS16475_CS_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <ADS16475_CSGPIO_Init+0x60>)
 8000dc8:	f001 fb64 	bl	8002494 <HAL_GPIO_WritePin>
}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief FreeRTOS SysTick kullandığı için HAL_Tick arttırmak için TIM6 kullanılmıştır.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d114      	bne.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
        HAL_IncTick();
 8000dee:	f000 fb11 	bl	8001414 <HAL_IncTick>

        static uint16_t tick_counter = 0;
        tick_counter++;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dfc:	801a      	strh	r2, [r3, #0]

        if (tick_counter >= 1000)
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e06:	d307      	bcc.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x3c>
        {
            system_seconds++;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e10:	6013      	str	r3, [r2, #0]
            tick_counter = 0;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	801a      	strh	r2, [r3, #0]
        }
    }
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40001000 	.word	0x40001000
 8000e24:	2000015c 	.word	0x2000015c
 8000e28:	20000144 	.word	0x20000144

08000e2c <Error_Handler>:

/**
 * @brief  Kritik hata durumunda sistem sonsuz döngüye girer
 */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
    while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x4>
	...

08000e34 <HAL_MspInit>:

#include "main.h"

void HAL_MspInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]

}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_ADC_MspInit>:


void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_ADC_MspInit+0x3c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10d      	bne.n	8000eb2 <HAL_ADC_MspInit+0x2e>
  {

    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_ADC_MspInit+0x40>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <HAL_ADC_MspInit+0x40>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_ADC_MspInit+0x40>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_CAN_MspInit>:




void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_CAN_MspInit+0x84>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12b      	bne.n	8000f42 <HAL_CAN_MspInit+0x7a>
  {

    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000ef4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_CAN_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f22:	2303      	movs	r3, #3
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f32:	2309      	movs	r3, #9
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_CAN_MspInit+0x8c>)
 8000f3e:	f001 f90d 	bl	800215c <HAL_GPIO_Init>

  }

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40006400 	.word	0x40006400
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020c00 	.word	0x40020c00

08000f58 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_SPI_MspInit+0x84>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d12b      	bne.n	8000fd2 <HAL_SPI_MspInit+0x7a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_SPI_MspInit+0x88>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <HAL_SPI_MspInit+0x88>)
 8000f84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_SPI_MspInit+0x88>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_SPI_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <HAL_SPI_MspInit+0x88>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_SPI_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fb2:	23e0      	movs	r3, #224	; 0xe0
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_SPI_MspInit+0x8c>)
 8000fce:	f001 f8c5 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40013000 	.word	0x40013000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_UART_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12b      	bne.n	8001062 <HAL_UART_MspInit+0x7a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_UART_MspInit+0x88>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_UART_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001042:	230c      	movs	r3, #12
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001052:	2307      	movs	r3, #7
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_UART_MspInit+0x8c>)
 800105e:	f001 f87d 	bl	800215c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40004400 	.word	0x40004400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000

08001078 <sensor_task>:
 * - ADIS16475 sensöründen gyro ve ivme değerlerini SPI ile alır
 * - Bu verileri global telemetry_packet içine yazar
 * - SPI hatası oluşursa error monitor görevine bildirim gönderir
 */
void sensor_task(void *params)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
    float gx, gy, gz;
    float ax, ay, az;

    for (;;)
    {
        ADIS16475_ReadGyro(&gx, &gy, &gz);
 8001080:	f107 0214 	add.w	r2, r7, #20
 8001084:	f107 0118 	add.w	r1, r7, #24
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa8b 	bl	80005a8 <ADIS16475_ReadGyro>
        ADIS16475_ReadAccel(&ax, &ay, &az);
 8001092:	f107 0208 	add.w	r2, r7, #8
 8001096:	f107 010c 	add.w	r1, r7, #12
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fac4 	bl	800062c <ADIS16475_ReadAccel>

        // SPI iletişim hatası varsa error monitor görevine bildir
        if (spi_timeout_flag == 1)
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <sensor_task+0xa4>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d109      	bne.n	80010c2 <sensor_task+0x4a>
        {
            xTaskNotifyGive(handle_error_monitor_task);
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <sensor_task+0xa8>)
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	2300      	movs	r3, #0
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2302      	movs	r3, #2
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	f005 f990 	bl	80063e0 <xTaskGenericNotify>
            continue;
 80010c0:	e02a      	b.n	8001118 <sensor_task+0xa0>
        }

        // Telemetry verisine güvenli erişim
        if (xSemaphoreTake(xTelemetryMutex, pdMS_TO_TICKS(10)) == pdTRUE)
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <sensor_task+0xac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	210a      	movs	r1, #10
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 fcd9 	bl	8004a80 <xQueueSemaphoreTake>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d11e      	bne.n	8001112 <sensor_task+0x9a>
        {
            telemetry_packet.gyro[0] = gx;
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <sensor_task+0xb0>)
 80010d8:	3309      	adds	r3, #9
 80010da:	601a      	str	r2, [r3, #0]
            telemetry_packet.gyro[1] = gy;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <sensor_task+0xb0>)
 80010e0:	330d      	adds	r3, #13
 80010e2:	601a      	str	r2, [r3, #0]
            telemetry_packet.gyro[2] = gz;
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <sensor_task+0xb0>)
 80010e8:	3311      	adds	r3, #17
 80010ea:	601a      	str	r2, [r3, #0]

            telemetry_packet.accel[0] = ax;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <sensor_task+0xb0>)
 80010f0:	3315      	adds	r3, #21
 80010f2:	601a      	str	r2, [r3, #0]
            telemetry_packet.accel[1] = ay;
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <sensor_task+0xb0>)
 80010f8:	3319      	adds	r3, #25
 80010fa:	601a      	str	r2, [r3, #0]
            telemetry_packet.accel[2] = az;
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <sensor_task+0xb0>)
 8001100:	331d      	adds	r3, #29
 8001102:	601a      	str	r2, [r3, #0]

            xSemaphoreGive(xTelemetryMutex);
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <sensor_task+0xac>)
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	f003 fad9 	bl	80046c4 <xQueueGenericSend>
        }

        vTaskDelay(pdMS_TO_TICKS(50)); // 20 Hz
 8001112:	2032      	movs	r0, #50	; 0x32
 8001114:	f004 f944 	bl	80053a0 <vTaskDelay>
        ADIS16475_ReadGyro(&gx, &gy, &gz);
 8001118:	e7b2      	b.n	8001080 <sensor_task+0x8>
 800111a:	bf00      	nop
 800111c:	20000140 	.word	0x20000140
 8001120:	20000154 	.word	0x20000154
 8001124:	20000158 	.word	0x20000158
 8001128:	20000160 	.word	0x20000160

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <telemetry_init>:
 *
 * Bu fonksiyon sistem başlatıldığında çağrılır.
 * Tüm alanlar 0 ile temizlenir, sabit başlık ve port bilgisi eklenir.
 */
void telemetry_init(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
    telemetry_packet.header = TELEMETRY_HEADER;
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <telemetry_init+0x84>)
 8001158:	22dd      	movs	r2, #221	; 0xdd
 800115a:	701a      	strb	r2, [r3, #0]
    telemetry_packet.timestamp = 0;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <telemetry_init+0x84>)
 800115e:	785a      	ldrb	r2, [r3, #1]
 8001160:	2200      	movs	r2, #0
 8001162:	705a      	strb	r2, [r3, #1]
 8001164:	789a      	ldrb	r2, [r3, #2]
 8001166:	2200      	movs	r2, #0
 8001168:	709a      	strb	r2, [r3, #2]
 800116a:	78da      	ldrb	r2, [r3, #3]
 800116c:	2200      	movs	r2, #0
 800116e:	70da      	strb	r2, [r3, #3]
 8001170:	791a      	ldrb	r2, [r3, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	711a      	strb	r2, [r3, #4]
    telemetry_packet.temp_degC = 0.0f;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <telemetry_init+0x84>)
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f8c3 2005 	str.w	r2, [r3, #5]

    for (int i = 0; i < 3; i++) {
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	e014      	b.n	80011b0 <telemetry_init+0x60>
        telemetry_packet.gyro[i] = 0.0f;
 8001186:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <telemetry_init+0x84>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3302      	adds	r3, #2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f8c3 2001 	str.w	r2, [r3, #1]
        telemetry_packet.accel[i] = 0.0f;
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <telemetry_init+0x84>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3304      	adds	r3, #4
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f8c3 2005 	str.w	r2, [r3, #5]
    for (int i = 0; i < 3; i++) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	dde7      	ble.n	8001186 <telemetry_init+0x36>
    }

    telemetry_packet.error_flags = 0;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <telemetry_init+0x84>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    telemetry_packet.port_id = 0;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <telemetry_init+0x84>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000160 	.word	0x20000160

080011d8 <temp_task>:
 * - ADC’den sıcaklık değerini hesaplar
 * - Değer 0–70°C dışında ise error monitor görevine bildirir
 * - Aksi durumda telemetry_packet.temp_degC içine yazar
 */
void temp_task()
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
    uint32_t adc_val = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
    float vsense = 0.0f;
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
    float temp = 0.0f;
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]

    for (;;)
    {
        HAL_ADC_Start(&temp_sensor_adc);
 80011ee:	4831      	ldr	r0, [pc, #196]	; (80012b4 <temp_task+0xdc>)
 80011f0:	f000 f974 	bl	80014dc <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&temp_sensor_adc, 10) == HAL_OK)
 80011f4:	210a      	movs	r1, #10
 80011f6:	482f      	ldr	r0, [pc, #188]	; (80012b4 <temp_task+0xdc>)
 80011f8:	f000 fa42 	bl	8001680 <HAL_ADC_PollForConversion>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d154      	bne.n	80012ac <temp_task+0xd4>
        {
            adc_val = HAL_ADC_GetValue(&temp_sensor_adc);
 8001202:	482c      	ldr	r0, [pc, #176]	; (80012b4 <temp_task+0xdc>)
 8001204:	f000 fac7 	bl	8001796 <HAL_ADC_GetValue>
 8001208:	60f8      	str	r0, [r7, #12]
            vsense = (adc_val / 4095.0f) * 3.3f;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001214:	eddf 6a28 	vldr	s13, [pc, #160]	; 80012b8 <temp_task+0xe0>
 8001218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80012bc <temp_task+0xe4>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	edc7 7a02 	vstr	s15, [r7, #8]

            // ST'nin dahili sıcaklık sensör formülü
            temp = ((vsense - 0.76f) / 0.0025f) + 25.0f;
 8001228:	edd7 7a02 	vldr	s15, [r7, #8]
 800122c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80012c0 <temp_task+0xe8>
 8001230:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001234:	eddf 6a23 	vldr	s13, [pc, #140]	; 80012c4 <temp_task+0xec>
 8001238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001244:	edc7 7a01 	vstr	s15, [r7, #4]

            // Aşırı sıcaklık/soğukluk tespiti
            if (temp > 70.0f || temp < 0.0f)
 8001248:	edd7 7a01 	vldr	s15, [r7, #4]
 800124c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80012c8 <temp_task+0xf0>
 8001250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	dc06      	bgt.n	8001268 <temp_task+0x90>
 800125a:	edd7 7a01 	vldr	s15, [r7, #4]
 800125e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	d50c      	bpl.n	8001282 <temp_task+0xaa>
            {
                temp_overunder_flag = 1;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <temp_task+0xf4>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
                xTaskNotifyGive(handle_error_monitor_task);
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <temp_task+0xf8>)
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	f005 f8b0 	bl	80063e0 <xTaskGenericNotify>
                continue;
 8001280:	e017      	b.n	80012b2 <temp_task+0xda>
            }

            // Telemetry'ye sıcaklık verisini güvenli şekilde yaz
            if (xSemaphoreTake(xTelemetryMutex, portMAX_DELAY) == pdTRUE)
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <temp_task+0xfc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f04f 31ff 	mov.w	r1, #4294967295
 800128a:	4618      	mov	r0, r3
 800128c:	f003 fbf8 	bl	8004a80 <xQueueSemaphoreTake>
 8001290:	4603      	mov	r3, r0
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10a      	bne.n	80012ac <temp_task+0xd4>
            {
                telemetry_packet.temp_degC = temp;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <temp_task+0x100>)
 8001298:	3305      	adds	r3, #5
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
                xSemaphoreGive(xTelemetryMutex);
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <temp_task+0xfc>)
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	f003 fa0c 	bl	80046c4 <xQueueGenericSend>
            }
        }

        vTaskDelay(pdMS_TO_TICKS(200)); // 5 Hz
 80012ac:	20c8      	movs	r0, #200	; 0xc8
 80012ae:	f004 f877 	bl	80053a0 <vTaskDelay>
        HAL_ADC_Start(&temp_sensor_adc);
 80012b2:	e79c      	b.n	80011ee <temp_task+0x16>
 80012b4:	200000a0 	.word	0x200000a0
 80012b8:	457ff000 	.word	0x457ff000
 80012bc:	40533333 	.word	0x40533333
 80012c0:	3f428f5c 	.word	0x3f428f5c
 80012c4:	3b23d70a 	.word	0x3b23d70a
 80012c8:	428c0000 	.word	0x428c0000
 80012cc:	20000141 	.word	0x20000141
 80012d0:	20000154 	.word	0x20000154
 80012d4:	20000158 	.word	0x20000158
 80012d8:	20000160 	.word	0x20000160

080012dc <HAL_InitTick>:
TIM_HandleTypeDef        htim6;



HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef     status;



  	 // 1. TIM6 saat sinyalini etkinleştir
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_InitTick+0x90>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a1f      	ldr	r2, [pc, #124]	; (800136c <HAL_InitTick+0x90>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_InitTick+0x90>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]

    // 2️. Timer yapılandırması başlat
    htim6.Instance = TIM6;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_InitTick+0x94>)
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <HAL_InitTick+0x98>)
 8001304:	601a      	str	r2, [r3, #0]

    //3.  Prescaler = 41999:
    // Timer clock = 42 MHz (APB1 timer clock)
    // 3. 1 MHz timer clock (42 MHz / (Prescaler + 1) = 1 MHz → 1 us)
    htim6.Init.Prescaler = 41;  // 42 MHz / 42 = 1 MHz
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_InitTick+0x94>)
 8001308:	2229      	movs	r2, #41	; 0x29
 800130a:	605a      	str	r2, [r3, #4]

    // 4️. Period = 999:
    // Timer her 1000 sayımda kesme üretir → 1000 / 1000MHz = 1 milisaniye
    htim6.Init.Period = 999;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_InitTick+0x94>)
 800130e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001312:	60da      	str	r2, [r3, #12]

    // 5️. Sayaç yukarı doğru saysın
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_InitTick+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]

    // 6️. Otomatik yeniden yükleme preload'u devre dışı bırak
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_InitTick+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <HAL_InitTick+0x94>)
 8001322:	f002 f99b 	bl	800365c <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d118      	bne.n	8001362 <HAL_InitTick+0x86>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001330:	480f      	ldr	r0, [pc, #60]	; (8001370 <HAL_InitTick+0x94>)
 8001332:	f002 f9ed 	bl	8003710 <HAL_TIM_Base_Start_IT>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d110      	bne.n	8001362 <HAL_InitTick+0x86>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001340:	2036      	movs	r0, #54	; 0x36
 8001342:	f000 fefd 	bl	8002140 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d808      	bhi.n	800135e <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	2036      	movs	r0, #54	; 0x36
 8001352:	f000 fed9 	bl	8002108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_InitTick+0x9c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e001      	b.n	8001362 <HAL_InitTick+0x86>
      }
      else
      {
        status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
      }
    }
  }


  return status;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	20000184 	.word	0x20000184
 8001374:	40001000 	.word	0x40001000
 8001378:	20000004 	.word	0x20000004

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001382:	490e      	ldr	r1, [pc, #56]	; (80013bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001398:	4c0b      	ldr	r4, [pc, #44]	; (80013c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a6:	f7ff fec1 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f006 f823 	bl	80073f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff fadd 	bl	800096c <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80013c0:	080074e8 	.word	0x080074e8
  ldr r2, =_sbss
 80013c4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80013c8:	20012f74 	.word	0x20012f74

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_Init+0x40>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_Init+0x40>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_Init+0x40>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 fe7a 	bl	80020f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff ff6c 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fd16 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	200001cc 	.word	0x200001cc

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200001cc 	.word	0x200001cc

08001454 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e033      	b.n	80014d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fd06 	bl	8000e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800149a:	f023 0302 	bic.w	r3, r3, #2
 800149e:	f043 0202 	orr.w	r2, r3, #2
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 faa4 	bl	80019f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	f043 0201 	orr.w	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
 80014c2:	e001      	b.n	80014c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Start+0x1a>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e0b2      	b.n	800165c <HAL_ADC_Start+0x180>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b01      	cmp	r3, #1
 800150a:	d018      	beq.n	800153e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800151c:	4b52      	ldr	r3, [pc, #328]	; (8001668 <HAL_ADC_Start+0x18c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a52      	ldr	r2, [pc, #328]	; (800166c <HAL_ADC_Start+0x190>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9a      	lsrs	r2, r3, #18
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001530:	e002      	b.n	8001538 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3b01      	subs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b01      	cmp	r3, #1
 800154a:	d17a      	bne.n	8001642 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001576:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158a:	d106      	bne.n	800159a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	f023 0206 	bic.w	r2, r3, #6
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	645a      	str	r2, [r3, #68]	; 0x44
 8001598:	e002      	b.n	80015a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a8:	4b31      	ldr	r3, [pc, #196]	; (8001670 <HAL_ADC_Start+0x194>)
 80015aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d12a      	bne.n	8001618 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a2b      	ldr	r2, [pc, #172]	; (8001674 <HAL_ADC_Start+0x198>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d015      	beq.n	80015f8 <HAL_ADC_Start+0x11c>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a29      	ldr	r2, [pc, #164]	; (8001678 <HAL_ADC_Start+0x19c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d105      	bne.n	80015e2 <HAL_ADC_Start+0x106>
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_ADC_Start+0x194>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a25      	ldr	r2, [pc, #148]	; (800167c <HAL_ADC_Start+0x1a0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d136      	bne.n	800165a <HAL_ADC_Start+0x17e>
 80015ec:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_ADC_Start+0x194>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d130      	bne.n	800165a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d129      	bne.n	800165a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	e020      	b.n	800165a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a15      	ldr	r2, [pc, #84]	; (8001674 <HAL_ADC_Start+0x198>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d11b      	bne.n	800165a <HAL_ADC_Start+0x17e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d114      	bne.n	800165a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	e00b      	b.n	800165a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f043 0210 	orr.w	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83
 8001670:	40012300 	.word	0x40012300
 8001674:	40012000 	.word	0x40012000
 8001678:	40012100 	.word	0x40012100
 800167c:	40012200 	.word	0x40012200

08001680 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169c:	d113      	bne.n	80016c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ac:	d10b      	bne.n	80016c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f043 0220 	orr.w	r2, r3, #32
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e063      	b.n	800178e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80016c6:	f7ff feb9 	bl	800143c <HAL_GetTick>
 80016ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016cc:	e021      	b.n	8001712 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d01d      	beq.n	8001712 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d007      	beq.n	80016ec <HAL_ADC_PollForConversion+0x6c>
 80016dc:	f7ff feae 	bl	800143c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d212      	bcs.n	8001712 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d00b      	beq.n	8001712 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f043 0204 	orr.w	r2, r3, #4
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e03d      	b.n	800178e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b02      	cmp	r3, #2
 800171e:	d1d6      	bne.n	80016ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0212 	mvn.w	r2, #18
 8001728:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d123      	bne.n	800178c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001748:	2b00      	cmp	r3, #0
 800174a:	d11f      	bne.n	800178c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1c>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e105      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x228>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b09      	cmp	r3, #9
 80017da:	d925      	bls.n	8001828 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68d9      	ldr	r1, [r3, #12]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	3b1e      	subs	r3, #30
 80017f2:	2207      	movs	r2, #7
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43da      	mvns	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68d9      	ldr	r1, [r3, #12]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	4603      	mov	r3, r0
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4403      	add	r3, r0
 800181a:	3b1e      	subs	r3, #30
 800181c:	409a      	lsls	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	e022      	b.n	800186e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6919      	ldr	r1, [r3, #16]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	2207      	movs	r2, #7
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6919      	ldr	r1, [r3, #16]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	4603      	mov	r3, r0
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4403      	add	r3, r0
 8001864:	409a      	lsls	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b06      	cmp	r3, #6
 8001874:	d824      	bhi.n	80018c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b05      	subs	r3, #5
 8001888:	221f      	movs	r2, #31
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	400a      	ands	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b05      	subs	r3, #5
 80018b2:	fa00 f203 	lsl.w	r2, r0, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
 80018be:	e04c      	b.n	800195a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d824      	bhi.n	8001912 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	3b23      	subs	r3, #35	; 0x23
 80018da:	221f      	movs	r2, #31
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43da      	mvns	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	400a      	ands	r2, r1
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	3b23      	subs	r3, #35	; 0x23
 8001904:	fa00 f203 	lsl.w	r2, r0, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
 8001910:	e023      	b.n	800195a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	3b41      	subs	r3, #65	; 0x41
 8001924:	221f      	movs	r2, #31
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	400a      	ands	r2, r1
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3b41      	subs	r3, #65	; 0x41
 800194e:	fa00 f203 	lsl.w	r2, r0, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_ADC_ConfigChannel+0x234>)
 800195c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a21      	ldr	r2, [pc, #132]	; (80019e8 <HAL_ADC_ConfigChannel+0x238>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d109      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1cc>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b12      	cmp	r3, #18
 800196e:	d105      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <HAL_ADC_ConfigChannel+0x238>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d123      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b10      	cmp	r3, #16
 800198c:	d003      	beq.n	8001996 <HAL_ADC_ConfigChannel+0x1e6>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b11      	cmp	r3, #17
 8001994:	d11b      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b10      	cmp	r3, #16
 80019a8:	d111      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_ADC_ConfigChannel+0x23c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_ADC_ConfigChannel+0x240>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	0c9a      	lsrs	r2, r3, #18
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019c0:	e002      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f9      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40012300 	.word	0x40012300
 80019e8:	40012000 	.word	0x40012000
 80019ec:	20000000 	.word	0x20000000
 80019f0:	431bde83 	.word	0x431bde83

080019f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fc:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <ADC_Init+0x1f0>)
 80019fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	021a      	lsls	r2, r3, #8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6899      	ldr	r1, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <ADC_Init+0x1f4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d022      	beq.n	8001ad2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6899      	ldr	r1, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6899      	ldr	r1, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	e00f      	b.n	8001af2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0202 	bic.w	r2, r2, #2
 8001b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e1b      	ldrb	r3, [r3, #24]
 8001b0c:	005a      	lsls	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01b      	beq.n	8001b58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6859      	ldr	r1, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	035a      	lsls	r2, r3, #13
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	e007      	b.n	8001b68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	051a      	lsls	r2, r3, #20
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001baa:	025a      	lsls	r2, r3, #9
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6899      	ldr	r1, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	029a      	lsls	r2, r3, #10
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40012300 	.word	0x40012300
 8001be8:	0f000001 	.word	0x0f000001

08001bec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0ed      	b.n	8001dda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff f95c 	bl	8000ec8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c20:	f7ff fc0c 	bl	800143c <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c26:	e012      	b.n	8001c4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c28:	f7ff fc08 	bl	800143c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b0a      	cmp	r3, #10
 8001c34:	d90b      	bls.n	8001c4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2205      	movs	r2, #5
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0c5      	b.n	8001dda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0e5      	beq.n	8001c28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0202 	bic.w	r2, r2, #2
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c6c:	f7ff fbe6 	bl	800143c <HAL_GetTick>
 8001c70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c72:	e012      	b.n	8001c9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c74:	f7ff fbe2 	bl	800143c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b0a      	cmp	r3, #10
 8001c80:	d90b      	bls.n	8001c9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2205      	movs	r2, #5
 8001c92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e09f      	b.n	8001dda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e5      	bne.n	8001c74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7e1b      	ldrb	r3, [r3, #24]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d108      	bne.n	8001cc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e007      	b.n	8001cd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7e5b      	ldrb	r3, [r3, #25]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d108      	bne.n	8001cec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e007      	b.n	8001cfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e9b      	ldrb	r3, [r3, #26]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d108      	bne.n	8001d16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0220 	orr.w	r2, r2, #32
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	e007      	b.n	8001d26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0220 	bic.w	r2, r2, #32
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7edb      	ldrb	r3, [r3, #27]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d108      	bne.n	8001d40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0210 	bic.w	r2, r2, #16
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e007      	b.n	8001d50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0210 	orr.w	r2, r2, #16
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7f1b      	ldrb	r3, [r3, #28]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d108      	bne.n	8001d6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e007      	b.n	8001d7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0208 	bic.w	r2, r2, #8
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7f5b      	ldrb	r3, [r3, #29]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d108      	bne.n	8001d94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0204 	orr.w	r2, r2, #4
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e007      	b.n	8001da4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0204 	bic.w	r2, r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	ea42 0103 	orr.w	r1, r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b089      	sub	sp, #36	; 0x24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e00:	7ffb      	ldrb	r3, [r7, #31]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d003      	beq.n	8001e0e <HAL_CAN_AddTxMessage+0x2c>
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	f040 80b8 	bne.w	8001f7e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10a      	bne.n	8001e2e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d105      	bne.n	8001e2e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a0 	beq.w	8001f6e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	0e1b      	lsrs	r3, r3, #24
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d907      	bls.n	8001e4e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e09e      	b.n	8001f8c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10d      	bne.n	8001e7c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	6809      	ldr	r1, [r1, #0]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3318      	adds	r3, #24
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	440b      	add	r3, r1
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e00f      	b.n	8001e9c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e86:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e90:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3318      	adds	r3, #24
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	440b      	add	r3, r1
 8001e9a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	440b      	add	r3, r1
 8001eac:	3304      	adds	r3, #4
 8001eae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	7d1b      	ldrb	r3, [r3, #20]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d111      	bne.n	8001edc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3318      	adds	r3, #24
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	6811      	ldr	r1, [r2, #0]
 8001ecc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3318      	adds	r3, #24
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3304      	adds	r3, #4
 8001eda:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3307      	adds	r3, #7
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	061a      	lsls	r2, r3, #24
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3306      	adds	r3, #6
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3305      	adds	r3, #5
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	3204      	adds	r2, #4
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	4610      	mov	r0, r2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	6811      	ldr	r1, [r2, #0]
 8001f04:	ea43 0200 	orr.w	r2, r3, r0
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f12:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3303      	adds	r3, #3
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	061a      	lsls	r2, r3, #24
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	041b      	lsls	r3, r3, #16
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	4610      	mov	r0, r2
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	6811      	ldr	r1, [r2, #0]
 8001f3a:	ea43 0200 	orr.w	r2, r3, r0
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	440b      	add	r3, r1
 8001f44:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3318      	adds	r3, #24
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	6811      	ldr	r1, [r2, #0]
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3318      	adds	r3, #24
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	440b      	add	r3, r1
 8001f68:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e00e      	b.n	8001f8c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e006      	b.n	8001f8c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3724      	adds	r7, #36	; 0x24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ff4c 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211a:	f7ff ff61 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 800211e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	6978      	ldr	r0, [r7, #20]
 8002126:	f7ff ffb1 	bl	800208c <NVIC_EncodePriority>
 800212a:	4602      	mov	r2, r0
 800212c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff80 	bl	8002038 <__NVIC_SetPriority>
}
 8002138:	bf00      	nop
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff54 	bl	8001ffc <__NVIC_EnableIRQ>
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e16b      	b.n	8002450 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 815a 	bne.w	800244a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d005      	beq.n	80021ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d130      	bne.n	8002210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e4:	2201      	movs	r2, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 0201 	and.w	r2, r3, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d017      	beq.n	800224c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80b4 	beq.w	800244a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b60      	ldr	r3, [pc, #384]	; (8002468 <HAL_GPIO_Init+0x30c>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a5f      	ldr	r2, [pc, #380]	; (8002468 <HAL_GPIO_Init+0x30c>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <HAL_GPIO_Init+0x30c>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a5b      	ldr	r2, [pc, #364]	; (800246c <HAL_GPIO_Init+0x310>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_GPIO_Init+0x314>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d02b      	beq.n	8002382 <HAL_GPIO_Init+0x226>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_GPIO_Init+0x318>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d025      	beq.n	800237e <HAL_GPIO_Init+0x222>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a50      	ldr	r2, [pc, #320]	; (8002478 <HAL_GPIO_Init+0x31c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01f      	beq.n	800237a <HAL_GPIO_Init+0x21e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4f      	ldr	r2, [pc, #316]	; (800247c <HAL_GPIO_Init+0x320>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d019      	beq.n	8002376 <HAL_GPIO_Init+0x21a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4e      	ldr	r2, [pc, #312]	; (8002480 <HAL_GPIO_Init+0x324>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x216>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4d      	ldr	r2, [pc, #308]	; (8002484 <HAL_GPIO_Init+0x328>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x212>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4c      	ldr	r2, [pc, #304]	; (8002488 <HAL_GPIO_Init+0x32c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x20e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4b      	ldr	r2, [pc, #300]	; (800248c <HAL_GPIO_Init+0x330>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x20a>
 8002362:	2307      	movs	r3, #7
 8002364:	e00e      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002366:	2308      	movs	r3, #8
 8002368:	e00c      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800236a:	2306      	movs	r3, #6
 800236c:	e00a      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800236e:	2305      	movs	r3, #5
 8002370:	e008      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002372:	2304      	movs	r3, #4
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002376:	2303      	movs	r3, #3
 8002378:	e004      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800237a:	2302      	movs	r3, #2
 800237c:	e002      	b.n	8002384 <HAL_GPIO_Init+0x228>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x228>
 8002382:	2300      	movs	r3, #0
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	f002 0203 	and.w	r2, r2, #3
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	4093      	lsls	r3, r2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002394:	4935      	ldr	r1, [pc, #212]	; (800246c <HAL_GPIO_Init+0x310>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c6:	4a32      	ldr	r2, [pc, #200]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f0:	4a27      	ldr	r2, [pc, #156]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_GPIO_Init+0x334>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241a:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_GPIO_Init+0x334>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_GPIO_Init+0x334>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002444:	4a12      	ldr	r2, [pc, #72]	; (8002490 <HAL_GPIO_Init+0x334>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3301      	adds	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	f67f ae90 	bls.w	8002178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40013800 	.word	0x40013800
 8002470:	40020000 	.word	0x40020000
 8002474:	40020400 	.word	0x40020400
 8002478:	40020800 	.word	0x40020800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40021400 	.word	0x40021400
 8002488:	40021800 	.word	0x40021800
 800248c:	40021c00 	.word	0x40021c00
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b0:	e003      	b.n	80024ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	041a      	lsls	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e267      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	4b88      	ldr	r3, [pc, #544]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d00c      	beq.n	800250c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d112      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250a:	d10b      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	4b7e      	ldr	r3, [pc, #504]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05b      	beq.n	80025d0 <HAL_RCC_OscConfig+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d157      	bne.n	80025d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e242      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x74>
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b70      	ldr	r3, [pc, #448]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6f      	ldr	r2, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6d      	ldr	r3, [pc, #436]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6c      	ldr	r2, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 8002560:	4b69      	ldr	r3, [pc, #420]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a68      	ldr	r2, [pc, #416]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe ff5c 	bl	800143c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe ff58 	bl	800143c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e207      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xc0>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe ff48 	bl	800143c <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe ff44 	bl	800143c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1f3      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0xe8>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d11c      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e1c7      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4937      	ldr	r1, [pc, #220]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	e03a      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fefd 	bl	800143c <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002646:	f7fe fef9 	bl	800143c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1a8      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4925      	ldr	r1, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x244>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fedc 	bl	800143c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fed8 	bl	800143c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e187      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d036      	beq.n	8002720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe febc 	bl	800143c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe feb8 	bl	800143c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e167      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_OscConfig+0x240>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x200>
 80026e6:	e01b      	b.n	8002720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_OscConfig+0x248>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fea5 	bl	800143c <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e00e      	b.n	8002714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fea1 	bl	800143c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d907      	bls.n	8002714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e150      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002708:	40023800 	.word	0x40023800
 800270c:	42470000 	.word	0x42470000
 8002710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b88      	ldr	r3, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ea      	bne.n	80026f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8097 	beq.w	800285c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002732:	4b81      	ldr	r3, [pc, #516]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10f      	bne.n	800275e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b7d      	ldr	r3, [pc, #500]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a7c      	ldr	r2, [pc, #496]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b7a      	ldr	r3, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275a:	2301      	movs	r3, #1
 800275c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275e:	4b77      	ldr	r3, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_RCC_OscConfig+0x474>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a73      	ldr	r2, [pc, #460]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002776:	f7fe fe61 	bl	800143c <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fe5d 	bl	800143c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e10c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_OscConfig+0x474>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x2ea>
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a63      	ldr	r2, [pc, #396]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	e01c      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x30c>
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a5e      	ldr	r2, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a5b      	ldr	r2, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0x324>
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a54      	ldr	r2, [pc, #336]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe fe22 	bl	800143c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fe1e 	bl	800143c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0cb      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0ee      	beq.n	80027fc <HAL_RCC_OscConfig+0x334>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7fe fe0c 	bl	800143c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fe08 	bl	800143c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0b5      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283e:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ee      	bne.n	8002828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a1 	beq.w	80029a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002866:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	d05c      	beq.n	800292c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d141      	bne.n	80028fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fddc 	bl	800143c <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fdd8 	bl	800143c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e087      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	019b      	lsls	r3, r3, #6
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	3b01      	subs	r3, #1
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	491b      	ldr	r1, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fdb1 	bl	800143c <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe fdad 	bl	800143c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e05c      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x416>
 80028fc:	e054      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fd9a 	bl	800143c <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fd96 	bl	800143c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e045      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x444>
 800292a:	e03d      	b.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e038      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
 8002940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x4ec>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d028      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d121      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d11a      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800297a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0cc      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b68      	ldr	r3, [pc, #416]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d90c      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b65      	ldr	r3, [pc, #404]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b8      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a24:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	494d      	ldr	r1, [pc, #308]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d044      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d119      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e067      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a96:	4b37      	ldr	r3, [pc, #220]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 0203 	bic.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4934      	ldr	r1, [pc, #208]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa8:	f7fe fcc8 	bl	800143c <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fe fcc4 	bl	800143c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e04f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 020c 	and.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d1eb      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d20c      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e032      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4916      	ldr	r1, [pc, #88]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	490e      	ldr	r1, [pc, #56]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b3e:	f000 f821 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	490a      	ldr	r1, [pc, #40]	; (8002b78 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	5ccb      	ldrb	r3, [r1, r3]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fbbc 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c00 	.word	0x40023c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	080074c0 	.word	0x080074c0
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b094      	sub	sp, #80	; 0x50
 8002b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b90:	2300      	movs	r3, #0
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b94:	2300      	movs	r3, #0
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9c:	4b79      	ldr	r3, [pc, #484]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	f200 80e1 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bb6:	e0db      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002bbc:	e0db      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bbe:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8002bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bc2:	e0d8      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bce:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d063      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	2200      	movs	r2, #0
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	f04f 0000 	mov.w	r0, #0
 8002bfe:	f04f 0100 	mov.w	r1, #0
 8002c02:	0159      	lsls	r1, r3, #5
 8002c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c08:	0150      	lsls	r0, r2, #5
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4621      	mov	r1, r4
 8002c10:	1a51      	subs	r1, r2, r1
 8002c12:	6139      	str	r1, [r7, #16]
 8002c14:	4629      	mov	r1, r5
 8002c16:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c28:	4659      	mov	r1, fp
 8002c2a:	018b      	lsls	r3, r1, #6
 8002c2c:	4651      	mov	r1, sl
 8002c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c32:	4651      	mov	r1, sl
 8002c34:	018a      	lsls	r2, r1, #6
 8002c36:	4651      	mov	r1, sl
 8002c38:	ebb2 0801 	subs.w	r8, r2, r1
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c56:	4690      	mov	r8, r2
 8002c58:	4699      	mov	r9, r3
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	eb18 0303 	adds.w	r3, r8, r3
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	462b      	mov	r3, r5
 8002c64:	eb49 0303 	adc.w	r3, r9, r3
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c76:	4629      	mov	r1, r5
 8002c78:	024b      	lsls	r3, r1, #9
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c80:	4621      	mov	r1, r4
 8002c82:	024a      	lsls	r2, r1, #9
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c94:	f7fd fa9c 	bl	80001d0 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca0:	e058      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	4611      	mov	r1, r2
 8002cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	f04f 0000 	mov.w	r0, #0
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	0159      	lsls	r1, r3, #5
 8002cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cce:	0150      	lsls	r0, r2, #5
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cda:	4649      	mov	r1, r9
 8002cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8002cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	00eb      	lsls	r3, r5, #3
 8002d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d0a:	00e2      	lsls	r2, r4, #3
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	461d      	mov	r5, r3
 8002d10:	4643      	mov	r3, r8
 8002d12:	18e3      	adds	r3, r4, r3
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	464b      	mov	r3, r9
 8002d18:	eb45 0303 	adc.w	r3, r5, r3
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	028b      	lsls	r3, r1, #10
 8002d2e:	4621      	mov	r1, r4
 8002d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d34:	4621      	mov	r1, r4
 8002d36:	028a      	lsls	r2, r1, #10
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	61fa      	str	r2, [r7, #28]
 8002d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d48:	f7fd fa42 	bl	80001d0 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3750      	adds	r7, #80	; 0x50
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000000 	.word	0x20000000

08002da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4903      	ldr	r1, [pc, #12]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	080074d0 	.word	0x080074d0

08002dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd4:	f7ff ffdc 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0b5b      	lsrs	r3, r3, #13
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4903      	ldr	r1, [pc, #12]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de6:	5ccb      	ldrb	r3, [r1, r3]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	080074d0 	.word	0x080074d0

08002df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e07b      	b.n	8002f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d108      	bne.n	8002e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1a:	d009      	beq.n	8002e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	61da      	str	r2, [r3, #28]
 8002e22:	e005      	b.n	8002e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f884 	bl	8000f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	ea42 0103 	orr.w	r1, r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	f003 0104 	and.w	r1, r3, #4
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f003 0210 	and.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b088      	sub	sp, #32
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_SPI_Transmit+0x22>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e126      	b.n	800317a <HAL_SPI_Transmit+0x270>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f34:	f7fe fa82 	bl	800143c <HAL_GetTick>
 8002f38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d002      	beq.n	8002f50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f4e:	e10b      	b.n	8003168 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_SPI_Transmit+0x52>
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f60:	e102      	b.n	8003168 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2203      	movs	r2, #3
 8002f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	88fa      	ldrh	r2, [r7, #6]
 8002f7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa8:	d10f      	bne.n	8002fca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d007      	beq.n	8002fe8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff0:	d14b      	bne.n	800308a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_SPI_Transmit+0xf6>
 8002ffa:	8afb      	ldrh	r3, [r7, #22]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d13e      	bne.n	800307e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	881a      	ldrh	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	1c9a      	adds	r2, r3, #2
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003024:	e02b      	b.n	800307e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b02      	cmp	r3, #2
 8003032:	d112      	bne.n	800305a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	86da      	strh	r2, [r3, #54]	; 0x36
 8003058:	e011      	b.n	800307e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800305a:	f7fe f9ef 	bl	800143c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d803      	bhi.n	8003072 <HAL_SPI_Transmit+0x168>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d102      	bne.n	8003078 <HAL_SPI_Transmit+0x16e>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800307c:	e074      	b.n	8003168 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ce      	bne.n	8003026 <HAL_SPI_Transmit+0x11c>
 8003088:	e04c      	b.n	8003124 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_SPI_Transmit+0x18e>
 8003092:	8afb      	ldrh	r3, [r7, #22]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d140      	bne.n	800311a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030be:	e02c      	b.n	800311a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d113      	bne.n	80030f6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	330c      	adds	r3, #12
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80030f4:	e011      	b.n	800311a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f6:	f7fe f9a1 	bl	800143c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d803      	bhi.n	800310e <HAL_SPI_Transmit+0x204>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d102      	bne.n	8003114 <HAL_SPI_Transmit+0x20a>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003118:	e026      	b.n	8003168 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1cd      	bne.n	80030c0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	6839      	ldr	r1, [r7, #0]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fa55 	bl	80035d8 <SPI_EndRxTxTransaction>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e000      	b.n	8003168 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003166:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003178:	7ffb      	ldrb	r3, [r7, #31]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b08c      	sub	sp, #48	; 0x30
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003190:	2301      	movs	r3, #1
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x26>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e18a      	b.n	80034be <HAL_SPI_TransmitReceive+0x33c>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b0:	f7fe f944 	bl	800143c <HAL_GetTick>
 80031b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d00f      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x70>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d8:	d107      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x68>
 80031e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d003      	beq.n	80031f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
 80031ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031f0:	e15b      	b.n	80034aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x82>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x82>
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d103      	bne.n	800320c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800320a:	e14e      	b.n	80034aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b04      	cmp	r3, #4
 8003216:	d003      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2205      	movs	r2, #5
 800321c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	887a      	ldrh	r2, [r7, #2]
 8003242:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d007      	beq.n	8003274 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003272:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800327c:	d178      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_SPI_TransmitReceive+0x10a>
 8003286:	8b7b      	ldrh	r3, [r7, #26]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d166      	bne.n	800335a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c9a      	adds	r2, r3, #2
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b0:	e053      	b.n	800335a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11b      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x176>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_SPI_TransmitReceive+0x176>
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d113      	bne.n	80032f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d119      	bne.n	800333a <HAL_SPI_TransmitReceive+0x1b8>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d014      	beq.n	800333a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	b292      	uxth	r2, r2
 800331c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003336:	2301      	movs	r3, #1
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800333a:	f7fe f87f 	bl	800143c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003346:	429a      	cmp	r2, r3
 8003348:	d807      	bhi.n	800335a <HAL_SPI_TransmitReceive+0x1d8>
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d003      	beq.n	800335a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003358:	e0a7      	b.n	80034aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1a6      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x130>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1a1      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x130>
 800336e:	e07c      	b.n	800346a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_SPI_TransmitReceive+0x1fc>
 8003378:	8b7b      	ldrh	r3, [r7, #26]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d16b      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a4:	e057      	b.n	8003456 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d11c      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x26c>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d017      	beq.n	80033ee <HAL_SPI_TransmitReceive+0x26c>
 80033be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d114      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d119      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x2ae>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d014      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800342c:	2301      	movs	r3, #1
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003430:	f7fe f804 	bl	800143c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800343c:	429a      	cmp	r2, r3
 800343e:	d803      	bhi.n	8003448 <HAL_SPI_TransmitReceive+0x2c6>
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d102      	bne.n	800344e <HAL_SPI_TransmitReceive+0x2cc>
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003454:	e029      	b.n	80034aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1a2      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x224>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d19d      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f8b2 	bl	80035d8 <SPI_EndRxTxTransaction>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003486:	e010      	b.n	80034aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	e000      	b.n	80034aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3730      	adds	r7, #48	; 0x30
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034d8:	f7fd ffb0 	bl	800143c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034e8:	f7fd ffa8 	bl	800143c <HAL_GetTick>
 80034ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ee:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	015b      	lsls	r3, r3, #5
 80034f4:	0d1b      	lsrs	r3, r3, #20
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034fe:	e054      	b.n	80035aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d050      	beq.n	80035aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003508:	f7fd ff98 	bl	800143c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	429a      	cmp	r2, r3
 8003516:	d902      	bls.n	800351e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d13d      	bne.n	800359a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800352c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003536:	d111      	bne.n	800355c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003540:	d004      	beq.n	800354c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354a:	d107      	bne.n	800355c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003564:	d10f      	bne.n	8003586 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e017      	b.n	80035ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4013      	ands	r3, r2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	bf0c      	ite	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	2300      	movne	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d19b      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000000 	.word	0x20000000

080035d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <SPI_EndRxTxTransaction+0x7c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <SPI_EndRxTxTransaction+0x80>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	0d5b      	lsrs	r3, r3, #21
 80035f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003602:	d112      	bne.n	800362a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2200      	movs	r2, #0
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7ff ff5a 	bl	80034c8 <SPI_WaitFlagStateUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e00f      	b.n	800364a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3b01      	subs	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b80      	cmp	r3, #128	; 0x80
 8003642:	d0f2      	beq.n	800362a <SPI_EndRxTxTransaction+0x52>
 8003644:	e000      	b.n	8003648 <SPI_EndRxTxTransaction+0x70>
        break;
 8003646:	bf00      	nop
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000000 	.word	0x20000000
 8003658:	165e9f81 	.word	0x165e9f81

0800365c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e041      	b.n	80036f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f839 	bl	80036fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f000 f9d8 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d001      	beq.n	8003728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e04e      	b.n	80037c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d01d      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_TIM_Base_Start_IT+0xdc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d010      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	e007      	b.n	80037c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800
 80037e0:	40000c00 	.word	0x40000c00
 80037e4:	40010400 	.word	0x40010400
 80037e8:	40014000 	.word	0x40014000
 80037ec:	40001800 	.word	0x40001800

080037f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d122      	bne.n	800384c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b02      	cmp	r3, #2
 8003812:	d11b      	bne.n	800384c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0202 	mvn.w	r2, #2
 800381c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8ee 	bl	8003a14 <HAL_TIM_IC_CaptureCallback>
 8003838:	e005      	b.n	8003846 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f8e0 	bl	8003a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f8f1 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b04      	cmp	r3, #4
 8003858:	d122      	bne.n	80038a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b04      	cmp	r3, #4
 8003866:	d11b      	bne.n	80038a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0204 	mvn.w	r2, #4
 8003870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8c4 	bl	8003a14 <HAL_TIM_IC_CaptureCallback>
 800388c:	e005      	b.n	800389a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f8b6 	bl	8003a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8c7 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d122      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d11b      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0208 	mvn.w	r2, #8
 80038c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2204      	movs	r2, #4
 80038ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f89a 	bl	8003a14 <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f88c 	bl	8003a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f89d 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d122      	bne.n	8003948 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d11b      	bne.n	8003948 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0210 	mvn.w	r2, #16
 8003918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2208      	movs	r2, #8
 800391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f870 	bl	8003a14 <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f862 	bl	8003a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f873 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d10e      	bne.n	8003974 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0201 	mvn.w	r2, #1
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd fa34 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b80      	cmp	r3, #128	; 0x80
 8003980:	d10e      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398c:	2b80      	cmp	r3, #128	; 0x80
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f902 	bl	8003ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d10e      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d107      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f838 	bl	8003a3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0220 	mvn.w	r2, #32
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8cc 	bl	8003b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a40      	ldr	r2, [pc, #256]	; (8003b64 <TIM_Base_SetConfig+0x114>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6e:	d00f      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a3d      	ldr	r2, [pc, #244]	; (8003b68 <TIM_Base_SetConfig+0x118>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a3c      	ldr	r2, [pc, #240]	; (8003b6c <TIM_Base_SetConfig+0x11c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d007      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3b      	ldr	r2, [pc, #236]	; (8003b70 <TIM_Base_SetConfig+0x120>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3a      	ldr	r2, [pc, #232]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d108      	bne.n	8003aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a2f      	ldr	r2, [pc, #188]	; (8003b64 <TIM_Base_SetConfig+0x114>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02b      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab0:	d027      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <TIM_Base_SetConfig+0x118>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d023      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <TIM_Base_SetConfig+0x11c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01f      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <TIM_Base_SetConfig+0x120>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01b      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d017      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <TIM_Base_SetConfig+0x128>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <TIM_Base_SetConfig+0x12c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00f      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a26      	ldr	r2, [pc, #152]	; (8003b80 <TIM_Base_SetConfig+0x130>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <TIM_Base_SetConfig+0x134>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a24      	ldr	r2, [pc, #144]	; (8003b88 <TIM_Base_SetConfig+0x138>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <TIM_Base_SetConfig+0x13c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <TIM_Base_SetConfig+0x114>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_Base_SetConfig+0xf8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d103      	bne.n	8003b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	615a      	str	r2, [r3, #20]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40010400 	.word	0x40010400
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40014400 	.word	0x40014400
 8003b80:	40014800 	.word	0x40014800
 8003b84:	40001800 	.word	0x40001800
 8003b88:	40001c00 	.word	0x40001c00
 8003b8c:	40002000 	.word	0x40002000

08003b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e03f      	b.n	8003c4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fa02 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f929 	bl	8003e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b08a      	sub	sp, #40	; 0x28
 8003c56:	af02      	add	r7, sp, #8
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d17c      	bne.n	8003d6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_UART_Transmit+0x2c>
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e075      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_UART_Transmit+0x3e>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e06e      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2221      	movs	r2, #33	; 0x21
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ca6:	f7fd fbc9 	bl	800143c <HAL_GetTick>
 8003caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	88fa      	ldrh	r2, [r7, #6]
 8003cb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	88fa      	ldrh	r2, [r7, #6]
 8003cb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d108      	bne.n	8003cd4 <HAL_UART_Transmit+0x82>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	e003      	b.n	8003cdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ce4:	e02a      	b.n	8003d3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2180      	movs	r1, #128	; 0x80
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f840 	bl	8003d76 <UART_WaitOnFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10b      	bne.n	8003d1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	e007      	b.n	8003d2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1cf      	bne.n	8003ce6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2140      	movs	r1, #64	; 0x40
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f810 	bl	8003d76 <UART_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e000      	b.n	8003d6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
  }
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b090      	sub	sp, #64	; 0x40
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	4613      	mov	r3, r2
 8003d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d86:	e050      	b.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d04c      	beq.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d96:	f7fd fb51 	bl	800143c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d241      	bcs.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc6:	637a      	str	r2, [r7, #52]	; 0x34
 8003dc8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e5      	bne.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dfa:	623a      	str	r2, [r7, #32]
 8003dfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	69f9      	ldr	r1, [r7, #28]
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e5      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e00f      	b.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4013      	ands	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d09f      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3740      	adds	r7, #64	; 0x40
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b0c0      	sub	sp, #256	; 0x100
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e70:	68d9      	ldr	r1, [r3, #12]
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	ea40 0301 	orr.w	r3, r0, r1
 8003e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eac:	f021 010c 	bic.w	r1, r1, #12
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	6999      	ldr	r1, [r3, #24]
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	ea40 0301 	orr.w	r3, r0, r1
 8003eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b8f      	ldr	r3, [pc, #572]	; (8004120 <UART_SetConfig+0x2cc>)
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d005      	beq.n	8003ef4 <UART_SetConfig+0xa0>
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <UART_SetConfig+0x2d0>)
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d104      	bne.n	8003efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7fe ff6c 	bl	8002dd0 <HAL_RCC_GetPCLK2Freq>
 8003ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003efc:	e003      	b.n	8003f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003efe:	f7fe ff53 	bl	8002da8 <HAL_RCC_GetPCLK1Freq>
 8003f02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f10:	f040 810c 	bne.w	800412c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f26:	4622      	mov	r2, r4
 8003f28:	462b      	mov	r3, r5
 8003f2a:	1891      	adds	r1, r2, r2
 8003f2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f2e:	415b      	adcs	r3, r3
 8003f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f36:	4621      	mov	r1, r4
 8003f38:	eb12 0801 	adds.w	r8, r2, r1
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	eb43 0901 	adc.w	r9, r3, r1
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f56:	4690      	mov	r8, r2
 8003f58:	4699      	mov	r9, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	eb18 0303 	adds.w	r3, r8, r3
 8003f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f64:	462b      	mov	r3, r5
 8003f66:	eb49 0303 	adc.w	r3, r9, r3
 8003f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f82:	460b      	mov	r3, r1
 8003f84:	18db      	adds	r3, r3, r3
 8003f86:	653b      	str	r3, [r7, #80]	; 0x50
 8003f88:	4613      	mov	r3, r2
 8003f8a:	eb42 0303 	adc.w	r3, r2, r3
 8003f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f98:	f7fc f91a 	bl	80001d0 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4b61      	ldr	r3, [pc, #388]	; (8004128 <UART_SetConfig+0x2d4>)
 8003fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	011c      	lsls	r4, r3, #4
 8003faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fcc:	4641      	mov	r1, r8
 8003fce:	eb12 0a01 	adds.w	sl, r2, r1
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fec:	4692      	mov	sl, r2
 8003fee:	469b      	mov	fp, r3
 8003ff0:	4643      	mov	r3, r8
 8003ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8004000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004010:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004018:	460b      	mov	r3, r1
 800401a:	18db      	adds	r3, r3, r3
 800401c:	643b      	str	r3, [r7, #64]	; 0x40
 800401e:	4613      	mov	r3, r2
 8004020:	eb42 0303 	adc.w	r3, r2, r3
 8004024:	647b      	str	r3, [r7, #68]	; 0x44
 8004026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800402a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800402e:	f7fc f8cf 	bl	80001d0 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4611      	mov	r1, r2
 8004038:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <UART_SetConfig+0x2d4>)
 800403a:	fba3 2301 	umull	r2, r3, r3, r1
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	2264      	movs	r2, #100	; 0x64
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	1acb      	subs	r3, r1, r3
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800404e:	4b36      	ldr	r3, [pc, #216]	; (8004128 <UART_SetConfig+0x2d4>)
 8004050:	fba3 2302 	umull	r2, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800405c:	441c      	add	r4, r3
 800405e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004068:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800406c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	1891      	adds	r1, r2, r2
 8004076:	63b9      	str	r1, [r7, #56]	; 0x38
 8004078:	415b      	adcs	r3, r3
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004080:	4641      	mov	r1, r8
 8004082:	1851      	adds	r1, r2, r1
 8004084:	6339      	str	r1, [r7, #48]	; 0x30
 8004086:	4649      	mov	r1, r9
 8004088:	414b      	adcs	r3, r1
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004098:	4659      	mov	r1, fp
 800409a:	00cb      	lsls	r3, r1, #3
 800409c:	4651      	mov	r1, sl
 800409e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a2:	4651      	mov	r1, sl
 80040a4:	00ca      	lsls	r2, r1, #3
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	4642      	mov	r2, r8
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040b4:	464b      	mov	r3, r9
 80040b6:	460a      	mov	r2, r1
 80040b8:	eb42 0303 	adc.w	r3, r2, r3
 80040bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040d4:	460b      	mov	r3, r1
 80040d6:	18db      	adds	r3, r3, r3
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040da:	4613      	mov	r3, r2
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040ea:	f7fc f871 	bl	80001d0 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <UART_SetConfig+0x2d4>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	; 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	3332      	adds	r3, #50	; 0x32
 8004106:	4a08      	ldr	r2, [pc, #32]	; (8004128 <UART_SetConfig+0x2d4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 0207 	and.w	r2, r3, #7
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4422      	add	r2, r4
 800411a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800411c:	e106      	b.n	800432c <UART_SetConfig+0x4d8>
 800411e:	bf00      	nop
 8004120:	40011000 	.word	0x40011000
 8004124:	40011400 	.word	0x40011400
 8004128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004130:	2200      	movs	r2, #0
 8004132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004136:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800413a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800413e:	4642      	mov	r2, r8
 8004140:	464b      	mov	r3, r9
 8004142:	1891      	adds	r1, r2, r2
 8004144:	6239      	str	r1, [r7, #32]
 8004146:	415b      	adcs	r3, r3
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
 800414a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800414e:	4641      	mov	r1, r8
 8004150:	1854      	adds	r4, r2, r1
 8004152:	4649      	mov	r1, r9
 8004154:	eb43 0501 	adc.w	r5, r3, r1
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	00eb      	lsls	r3, r5, #3
 8004162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004166:	00e2      	lsls	r2, r4, #3
 8004168:	4614      	mov	r4, r2
 800416a:	461d      	mov	r5, r3
 800416c:	4643      	mov	r3, r8
 800416e:	18e3      	adds	r3, r4, r3
 8004170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004174:	464b      	mov	r3, r9
 8004176:	eb45 0303 	adc.w	r3, r5, r3
 800417a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800418a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800419a:	4629      	mov	r1, r5
 800419c:	008b      	lsls	r3, r1, #2
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a4:	4621      	mov	r1, r4
 80041a6:	008a      	lsls	r2, r1, #2
 80041a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041ac:	f7fc f810 	bl	80001d0 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4b60      	ldr	r3, [pc, #384]	; (8004338 <UART_SetConfig+0x4e4>)
 80041b6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	011c      	lsls	r4, r3, #4
 80041be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	61b9      	str	r1, [r7, #24]
 80041d8:	415b      	adcs	r3, r3
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e0:	4641      	mov	r1, r8
 80041e2:	1851      	adds	r1, r2, r1
 80041e4:	6139      	str	r1, [r7, #16]
 80041e6:	4649      	mov	r1, r9
 80041e8:	414b      	adcs	r3, r1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f8:	4659      	mov	r1, fp
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4651      	mov	r1, sl
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4642      	mov	r2, r8
 800420e:	189b      	adds	r3, r3, r2
 8004210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004214:	464b      	mov	r3, r9
 8004216:	460a      	mov	r2, r1
 8004218:	eb42 0303 	adc.w	r3, r2, r3
 800421c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	67bb      	str	r3, [r7, #120]	; 0x78
 800422a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004238:	4649      	mov	r1, r9
 800423a:	008b      	lsls	r3, r1, #2
 800423c:	4641      	mov	r1, r8
 800423e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004242:	4641      	mov	r1, r8
 8004244:	008a      	lsls	r2, r1, #2
 8004246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800424a:	f7fb ffc1 	bl	80001d0 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4611      	mov	r1, r2
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <UART_SetConfig+0x4e4>)
 8004256:	fba3 2301 	umull	r2, r3, r3, r1
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2264      	movs	r2, #100	; 0x64
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	1acb      	subs	r3, r1, r3
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	3332      	adds	r3, #50	; 0x32
 8004268:	4a33      	ldr	r2, [pc, #204]	; (8004338 <UART_SetConfig+0x4e4>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004274:	441c      	add	r4, r3
 8004276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800427a:	2200      	movs	r2, #0
 800427c:	673b      	str	r3, [r7, #112]	; 0x70
 800427e:	677a      	str	r2, [r7, #116]	; 0x74
 8004280:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	1891      	adds	r1, r2, r2
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	415b      	adcs	r3, r3
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004294:	4641      	mov	r1, r8
 8004296:	1851      	adds	r1, r2, r1
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	4649      	mov	r1, r9
 800429c:	414b      	adcs	r3, r1
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ac:	4659      	mov	r1, fp
 80042ae:	00cb      	lsls	r3, r1, #3
 80042b0:	4651      	mov	r1, sl
 80042b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b6:	4651      	mov	r1, sl
 80042b8:	00ca      	lsls	r2, r1, #3
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	4642      	mov	r2, r8
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042c6:	464b      	mov	r3, r9
 80042c8:	460a      	mov	r2, r1
 80042ca:	eb42 0303 	adc.w	r3, r2, r3
 80042ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	663b      	str	r3, [r7, #96]	; 0x60
 80042da:	667a      	str	r2, [r7, #100]	; 0x64
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042e8:	4649      	mov	r1, r9
 80042ea:	008b      	lsls	r3, r1, #2
 80042ec:	4641      	mov	r1, r8
 80042ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f2:	4641      	mov	r1, r8
 80042f4:	008a      	lsls	r2, r1, #2
 80042f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042fa:	f7fb ff69 	bl	80001d0 <__aeabi_uldivmod>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <UART_SetConfig+0x4e4>)
 8004304:	fba3 1302 	umull	r1, r3, r3, r2
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	2164      	movs	r1, #100	; 0x64
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	3332      	adds	r3, #50	; 0x32
 8004316:	4a08      	ldr	r2, [pc, #32]	; (8004338 <UART_SetConfig+0x4e4>)
 8004318:	fba2 2303 	umull	r2, r3, r2, r3
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4422      	add	r2, r4
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004338:	51eb851f 	.word	0x51eb851f

0800433c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f103 0208 	add.w	r2, r3, #8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f04f 32ff 	mov.w	r2, #4294967295
 8004354:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f103 0208 	add.w	r2, r3, #8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f103 0208 	add.w	r2, r3, #8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d103      	bne.n	80043b6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e00c      	b.n	80043d0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3308      	adds	r3, #8
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e002      	b.n	80043c4 <vListInsert+0x2e>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d2f6      	bcs.n	80043be <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	601a      	str	r2, [r3, #0]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6892      	ldr	r2, [r2, #8]
 800441e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6852      	ldr	r2, [r2, #4]
 8004428:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	d103      	bne.n	800443c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004466:	2301      	movs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueGenericReset+0x2e>
        __asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	60fb      	str	r3, [r7, #12]
    }
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d05d      	beq.n	800454c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004494:	2b00      	cmp	r3, #0
 8004496:	d059      	beq.n	800454c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	2100      	movs	r1, #0
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d000      	beq.n	80044ac <xQueueGenericReset+0x50>
 80044aa:	2101      	movs	r1, #1
 80044ac:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d14c      	bne.n	800454c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80044b2:	f002 fce9 	bl	8006e88 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	6939      	ldr	r1, [r7, #16]
 80044c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	441a      	add	r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2200      	movs	r2, #0
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	3b01      	subs	r3, #1
 80044e4:	6939      	ldr	r1, [r7, #16]
 80044e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	441a      	add	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	22ff      	movs	r2, #255	; 0xff
 80044f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	22ff      	movs	r2, #255	; 0xff
 80044fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d114      	bne.n	8004532 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	3310      	adds	r3, #16
 8004514:	4618      	mov	r0, r3
 8004516:	f001 fabf 	bl	8005a98 <xTaskRemoveFromEventList>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d012      	beq.n	8004546 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004520:	4b15      	ldr	r3, [pc, #84]	; (8004578 <xQueueGenericReset+0x11c>)
 8004522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	e009      	b.n	8004546 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3310      	adds	r3, #16
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff00 	bl	800433c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	3324      	adds	r3, #36	; 0x24
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fefb 	bl	800433c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004546:	f002 fccf 	bl	8006ee8 <vPortExitCritical>
 800454a:	e001      	b.n	8004550 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <xQueueGenericReset+0x110>
        __asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	60bb      	str	r3, [r7, #8]
    }
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800456c:	697b      	ldr	r3, [r7, #20]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02e      	beq.n	80045f2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004594:	2100      	movs	r1, #0
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	fba3 2302 	umull	r2, r3, r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d000      	beq.n	80045a4 <xQueueGenericCreate+0x28>
 80045a2:	2101      	movs	r1, #1
 80045a4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d123      	bne.n	80045f2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80045b2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80045b6:	d81c      	bhi.n	80045f2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	fb02 f303 	mul.w	r3, r2, r3
 80045c0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	3350      	adds	r3, #80	; 0x50
 80045c6:	4618      	mov	r0, r3
 80045c8:	f002 fd40 	bl	800704c <pvPortMalloc>
 80045cc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01c      	beq.n	800460e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3350      	adds	r3, #80	; 0x50
 80045dc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045de:	79fa      	ldrb	r2, [r7, #7]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f814 	bl	8004618 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80045f0:	e00d      	b.n	800460e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <xQueueGenericCreate+0x92>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	613b      	str	r3, [r7, #16]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800460e:	69fb      	ldr	r3, [r7, #28]
    }
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d103      	bne.n	8004634 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e002      	b.n	800463a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004646:	2101      	movs	r1, #1
 8004648:	69b8      	ldr	r0, [r7, #24]
 800464a:	f7ff ff07 	bl	800445c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800467e:	2300      	movs	r3, #0
 8004680:	2200      	movs	r2, #0
 8004682:	2100      	movs	r1, #0
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f81d 	bl	80046c4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8004692:	b580      	push	{r7, lr}
 8004694:	b086      	sub	sp, #24
 8004696:	af00      	add	r7, sp, #0
 8004698:	4603      	mov	r3, r0
 800469a:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	461a      	mov	r2, r3
 80046a8:	6939      	ldr	r1, [r7, #16]
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff66 	bl	800457c <xQueueGenericCreate>
 80046b0:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff ffd3 	bl	800465e <prvInitialiseMutex>

        return xNewQueue;
 80046b8:	68fb      	ldr	r3, [r7, #12]
    }
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08e      	sub	sp, #56	; 0x38
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046d2:	2300      	movs	r3, #0
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueGenericSend+0x32>
        __asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <xQueueGenericSend+0x40>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <xQueueGenericSend+0x44>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <xQueueGenericSend+0x46>
 8004708:	2300      	movs	r3, #0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <xQueueGenericSend+0x60>
        __asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d103      	bne.n	8004732 <xQueueGenericSend+0x6e>
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <xQueueGenericSend+0x72>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueGenericSend+0x74>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <xQueueGenericSend+0x8e>
        __asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	623b      	str	r3, [r7, #32]
    }
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004752:	f001 fbb1 	bl	8005eb8 <xTaskGetSchedulerState>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <xQueueGenericSend+0x9e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <xQueueGenericSend+0xa2>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <xQueueGenericSend+0xa4>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <xQueueGenericSend+0xbe>
        __asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61fb      	str	r3, [r7, #28]
    }
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004782:	f002 fb81 	bl	8006e88 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	429a      	cmp	r2, r3
 8004790:	d302      	bcc.n	8004798 <xQueueGenericSend+0xd4>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d129      	bne.n	80047ec <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800479e:	f000 fa85 	bl	8004cac <prvCopyDataToQueue>
 80047a2:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d010      	beq.n	80047ce <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	3324      	adds	r3, #36	; 0x24
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f971 	bl	8005a98 <xTaskRemoveFromEventList>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80047bc:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <xQueueGenericSend+0x1f8>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	e00a      	b.n	80047e4 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80047d4:	4b39      	ldr	r3, [pc, #228]	; (80048bc <xQueueGenericSend+0x1f8>)
 80047d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80047e4:	f002 fb80 	bl	8006ee8 <vPortExitCritical>
                return pdPASS;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e063      	b.n	80048b4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80047f2:	f002 fb79 	bl	8006ee8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e05c      	b.n	80048b4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	4618      	mov	r0, r3
 8004806:	f001 fa1d 	bl	8005c44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800480a:	2301      	movs	r3, #1
 800480c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800480e:	f002 fb6b 	bl	8006ee8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004812:	f000 fe4b 	bl	80054ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004816:	f002 fb37 	bl	8006e88 <vPortEnterCritical>
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004820:	b25b      	sxtb	r3, r3
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d103      	bne.n	8004830 <xQueueGenericSend+0x16c>
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004836:	b25b      	sxtb	r3, r3
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d103      	bne.n	8004846 <xQueueGenericSend+0x182>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004846:	f002 fb4f 	bl	8006ee8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800484a:	1d3a      	adds	r2, r7, #4
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f001 fa0c 	bl	8005c70 <xTaskCheckForTimeOut>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d124      	bne.n	80048a8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800485e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004860:	f000 fb1c 	bl	8004e9c <prvIsQueueFull>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d018      	beq.n	800489c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	3310      	adds	r3, #16
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f001 f8a6 	bl	80059c4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800487a:	f000 faa7 	bl	8004dcc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800487e:	f000 fe23 	bl	80054c8 <xTaskResumeAll>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	f47f af7c 	bne.w	8004782 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <xQueueGenericSend+0x1f8>)
 800488c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	e772      	b.n	8004782 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800489c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800489e:	f000 fa95 	bl	8004dcc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80048a2:	f000 fe11 	bl	80054c8 <xTaskResumeAll>
 80048a6:	e76c      	b.n	8004782 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80048a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048aa:	f000 fa8f 	bl	8004dcc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80048ae:	f000 fe0b 	bl	80054c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80048b2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3738      	adds	r7, #56	; 0x38
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	; 0x30
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <xQueueReceive+0x30>
        __asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	623b      	str	r3, [r7, #32]
    }
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <xQueueReceive+0x3e>
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <xQueueReceive+0x42>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <xQueueReceive+0x44>
 8004902:	2300      	movs	r3, #0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <xQueueReceive+0x5e>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	61fb      	str	r3, [r7, #28]
    }
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800491e:	f001 facb 	bl	8005eb8 <xTaskGetSchedulerState>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <xQueueReceive+0x6e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <xQueueReceive+0x72>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <xQueueReceive+0x74>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <xQueueReceive+0x8e>
        __asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	61bb      	str	r3, [r7, #24]
    }
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800494e:	f002 fa9b 	bl	8006e88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01f      	beq.n	800499e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004962:	f000 fa0d 	bl	8004d80 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	1e5a      	subs	r2, r3, #1
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00f      	beq.n	8004996 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	3310      	adds	r3, #16
 800497a:	4618      	mov	r0, r3
 800497c:	f001 f88c 	bl	8005a98 <xTaskRemoveFromEventList>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004986:	4b3d      	ldr	r3, [pc, #244]	; (8004a7c <xQueueReceive+0x1bc>)
 8004988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004996:	f002 faa7 	bl	8006ee8 <vPortExitCritical>
                return pdPASS;
 800499a:	2301      	movs	r3, #1
 800499c:	e069      	b.n	8004a72 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80049a4:	f002 faa0 	bl	8006ee8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e062      	b.n	8004a72 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 f944 	bl	8005c44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80049c0:	f002 fa92 	bl	8006ee8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80049c4:	f000 fd72 	bl	80054ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80049c8:	f002 fa5e 	bl	8006e88 <vPortEnterCritical>
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049d2:	b25b      	sxtb	r3, r3
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d103      	bne.n	80049e2 <xQueueReceive+0x122>
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049e8:	b25b      	sxtb	r3, r3
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d103      	bne.n	80049f8 <xQueueReceive+0x138>
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049f8:	f002 fa76 	bl	8006ee8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049fc:	1d3a      	adds	r2, r7, #4
 80049fe:	f107 0310 	add.w	r3, r7, #16
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f933 	bl	8005c70 <xTaskCheckForTimeOut>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d123      	bne.n	8004a58 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a12:	f000 fa2d 	bl	8004e70 <prvIsQueueEmpty>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d017      	beq.n	8004a4c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	3324      	adds	r3, #36	; 0x24
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 ffcd 	bl	80059c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a2c:	f000 f9ce 	bl	8004dcc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004a30:	f000 fd4a 	bl	80054c8 <xTaskResumeAll>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d189      	bne.n	800494e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <xQueueReceive+0x1bc>)
 8004a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	e780      	b.n	800494e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a4e:	f000 f9bd 	bl	8004dcc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004a52:	f000 fd39 	bl	80054c8 <xTaskResumeAll>
 8004a56:	e77a      	b.n	800494e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a5a:	f000 f9b7 	bl	8004dcc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004a5e:	f000 fd33 	bl	80054c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a64:	f000 fa04 	bl	8004e70 <prvIsQueueEmpty>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f43f af6f 	beq.w	800494e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004a70:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3730      	adds	r7, #48	; 0x30
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08c      	sub	sp, #48	; 0x30
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	61bb      	str	r3, [r7, #24]
    }
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	617b      	str	r3, [r7, #20]
    }
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ad0:	f001 f9f2 	bl	8005eb8 <xTaskGetSchedulerState>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <xQueueSemaphoreTake+0x60>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <xQueueSemaphoreTake+0x64>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <xQueueSemaphoreTake+0x66>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	613b      	str	r3, [r7, #16]
    }
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004b00:	f002 f9c2 	bl	8006e88 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d024      	beq.n	8004b5a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	1e5a      	subs	r2, r3, #1
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b20:	f001 fbe2 	bl	80062e8 <pvTaskIncrementMutexHeldCount>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00f      	beq.n	8004b52 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	3310      	adds	r3, #16
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 ffae 	bl	8005a98 <xTaskRemoveFromEventList>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004b42:	4b4d      	ldr	r3, [pc, #308]	; (8004c78 <xQueueSemaphoreTake+0x1f8>)
 8004b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004b52:	f002 f9c9 	bl	8006ee8 <vPortExitCritical>
                return pdPASS;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e089      	b.n	8004c6e <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004b60:	f002 f9c2 	bl	8006ee8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e082      	b.n	8004c6e <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004b6e:	f107 0308 	add.w	r3, r7, #8
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 f866 	bl	8005c44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004b7c:	f002 f9b4 	bl	8006ee8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004b80:	f000 fc94 	bl	80054ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004b84:	f002 f980 	bl	8006e88 <vPortEnterCritical>
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8e:	b25b      	sxtb	r3, r3
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d103      	bne.n	8004b9e <xQueueSemaphoreTake+0x11e>
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba4:	b25b      	sxtb	r3, r3
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d103      	bne.n	8004bb4 <xQueueSemaphoreTake+0x134>
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb4:	f002 f998 	bl	8006ee8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb8:	463a      	mov	r2, r7
 8004bba:	f107 0308 	add.w	r3, r7, #8
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 f855 	bl	8005c70 <xTaskCheckForTimeOut>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d132      	bne.n	8004c32 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bce:	f000 f94f 	bl	8004e70 <prvIsQueueEmpty>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d026      	beq.n	8004c26 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d109      	bne.n	8004bf4 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8004be0:	f002 f952 	bl	8006e88 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 f983 	bl	8005ef4 <xTaskPriorityInherit>
 8004bee:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8004bf0:	f002 f97a 	bl	8006ee8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	3324      	adds	r3, #36	; 0x24
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fee1 	bl	80059c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004c02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c04:	f000 f8e2 	bl	8004dcc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004c08:	f000 fc5e 	bl	80054c8 <xTaskResumeAll>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f47f af76 	bne.w	8004b00 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <xQueueSemaphoreTake+0x1f8>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	e76c      	b.n	8004b00 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c28:	f000 f8d0 	bl	8004dcc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004c2c:	f000 fc4c 	bl	80054c8 <xTaskResumeAll>
 8004c30:	e766      	b.n	8004b00 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c34:	f000 f8ca 	bl	8004dcc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004c38:	f000 fc46 	bl	80054c8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c3e:	f000 f917 	bl	8004e70 <prvIsQueueEmpty>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f43f af5b 	beq.w	8004b00 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00d      	beq.n	8004c6c <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8004c50:	f002 f91a 	bl	8006e88 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c56:	f000 f811 	bl	8004c7c <prvGetDisinheritPriorityAfterTimeout>
 8004c5a:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	69f9      	ldr	r1, [r7, #28]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 fa88 	bl	8006178 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004c68:	f002 f93e 	bl	8006ee8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004c6c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3730      	adds	r7, #48	; 0x30
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d006      	beq.n	8004c9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1c3 0305 	rsb	r3, r3, #5
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e001      	b.n	8004c9e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
    }
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10d      	bne.n	8004ce6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d14d      	bne.n	8004d6e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 f9aa 	bl	8006030 <xTaskPriorityDisinherit>
 8004cdc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	e043      	b.n	8004d6e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d119      	bne.n	8004d20 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6858      	ldr	r0, [r3, #4]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	f002 fba0 	bl	800743c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	441a      	add	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d32b      	bcc.n	8004d6e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]
 8004d1e:	e026      	b.n	8004d6e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68d8      	ldr	r0, [r3, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	f002 fb86 	bl	800743c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	425b      	negs	r3, r3
 8004d3a:	441a      	add	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d207      	bcs.n	8004d5c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	425b      	negs	r3, r3
 8004d56:	441a      	add	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d105      	bne.n	8004d6e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004d76:	697b      	ldr	r3, [r7, #20]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d018      	beq.n	8004dc4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	441a      	add	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d303      	bcc.n	8004db4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68d9      	ldr	r1, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6838      	ldr	r0, [r7, #0]
 8004dc0:	f002 fb3c 	bl	800743c <memcpy>
    }
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004dd4:	f002 f858 	bl	8006e88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dde:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004de0:	e011      	b.n	8004e06 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d012      	beq.n	8004e10 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3324      	adds	r3, #36	; 0x24
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fe52 	bl	8005a98 <xTaskRemoveFromEventList>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004dfa:	f000 ff9f 	bl	8005d3c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	dce9      	bgt.n	8004de2 <prvUnlockQueue+0x16>
 8004e0e:	e000      	b.n	8004e12 <prvUnlockQueue+0x46>
                    break;
 8004e10:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	22ff      	movs	r2, #255	; 0xff
 8004e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004e1a:	f002 f865 	bl	8006ee8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004e1e:	f002 f833 	bl	8006e88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e28:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e2a:	e011      	b.n	8004e50 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d012      	beq.n	8004e5a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3310      	adds	r3, #16
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fe2d 	bl	8005a98 <xTaskRemoveFromEventList>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004e44:	f000 ff7a 	bl	8005d3c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004e48:	7bbb      	ldrb	r3, [r7, #14]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	dce9      	bgt.n	8004e2c <prvUnlockQueue+0x60>
 8004e58:	e000      	b.n	8004e5c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004e5a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	22ff      	movs	r2, #255	; 0xff
 8004e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004e64:	f002 f840 	bl	8006ee8 <vPortExitCritical>
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004e78:	f002 f806 	bl	8006e88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e001      	b.n	8004e8e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004e8e:	f002 f82b 	bl	8006ee8 <vPortExitCritical>

    return xReturn;
 8004e92:	68fb      	ldr	r3, [r7, #12]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004ea4:	f001 fff0 	bl	8006e88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d102      	bne.n	8004eba <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e001      	b.n	8004ebe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004ebe:	f002 f813 	bl	8006ee8 <vPortExitCritical>

    return xReturn;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	60fb      	str	r3, [r7, #12]
    }
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d024      	beq.n	8004f46 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	e01e      	b.n	8004f40 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004f02:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <vQueueAddToRegistry+0x98>)
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4413      	add	r3, r2
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d105      	bne.n	8004f1e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <vQueueAddToRegistry+0x98>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
                    break;
 8004f1c:	e013      	b.n	8004f46 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <vQueueAddToRegistry+0x6e>
 8004f24:	4a0f      	ldr	r2, [pc, #60]	; (8004f64 <vQueueAddToRegistry+0x98>)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <vQueueAddToRegistry+0x98>)
 8004f36:	4413      	add	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b07      	cmp	r3, #7
 8004f44:	d9dd      	bls.n	8004f02 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	200001d0 	.word	0x200001d0

08004f68 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004f78:	f001 ff86 	bl	8006e88 <vPortEnterCritical>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f82:	b25b      	sxtb	r3, r3
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d103      	bne.n	8004f92 <vQueueWaitForMessageRestricted+0x2a>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d103      	bne.n	8004fa8 <vQueueWaitForMessageRestricted+0x40>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa8:	f001 ff9e 	bl	8006ee8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3324      	adds	r3, #36	; 0x24
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fd25 	bl	8005a0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004fc2:	6978      	ldr	r0, [r7, #20]
 8004fc4:	f7ff ff02 	bl	8004dcc <prvUnlockQueue>
    }
 8004fc8:	bf00      	nop
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	; 0x30
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f002 f831 	bl	800704c <pvPortMalloc>
 8004fea:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d013      	beq.n	800501a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ff2:	2058      	movs	r0, #88	; 0x58
 8004ff4:	f002 f82a 	bl	800704c <pvPortMalloc>
 8004ff8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005000:	2258      	movs	r2, #88	; 0x58
 8005002:	2100      	movs	r1, #0
 8005004:	69f8      	ldr	r0, [r7, #28]
 8005006:	f002 f9ed 	bl	80073e4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
 8005010:	e005      	b.n	800501e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005012:	6978      	ldr	r0, [r7, #20]
 8005014:	f002 f8d4 	bl	80071c0 <vPortFree>
 8005018:	e001      	b.n	800501e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d013      	beq.n	800504c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005024:	88fa      	ldrh	r2, [r7, #6]
 8005026:	2300      	movs	r3, #0
 8005028:	9303      	str	r3, [sp, #12]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	9302      	str	r3, [sp, #8]
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f80e 	bl	800505c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005040:	69f8      	ldr	r0, [r7, #28]
 8005042:	f000 f899 	bl	8005178 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005046:	2301      	movs	r3, #1
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e002      	b.n	8005052 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800504c:	f04f 33ff 	mov.w	r3, #4294967295
 8005050:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005052:	69bb      	ldr	r3, [r7, #24]
    }
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	461a      	mov	r2, r3
 8005074:	21a5      	movs	r1, #165	; 0xa5
 8005076:	f002 f9b5 	bl	80073e4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005084:	3b01      	subs	r3, #1
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f023 0307 	bic.w	r3, r3, #7
 8005092:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <prvInitialiseNewTask+0x58>
        __asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	617b      	str	r3, [r7, #20]
    }
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01e      	beq.n	80050f8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	e012      	b.n	80050e6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	7819      	ldrb	r1, [r3, #0]
 80050c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	3334      	adds	r3, #52	; 0x34
 80050d0:	460a      	mov	r2, r1
 80050d2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d006      	beq.n	80050ee <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	3301      	adds	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2b09      	cmp	r3, #9
 80050ea:	d9e9      	bls.n	80050c0 <prvInitialiseNewTask+0x64>
 80050ec:	e000      	b.n	80050f0 <prvInitialiseNewTask+0x94>
            {
                break;
 80050ee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d90a      	bls.n	8005114 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	613b      	str	r3, [r7, #16]
    }
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2b04      	cmp	r3, #4
 8005118:	d901      	bls.n	800511e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800511a:	2304      	movs	r3, #4
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005122:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005128:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	3304      	adds	r3, #4
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff f924 	bl	800437c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	3318      	adds	r3, #24
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff f91f 	bl	800437c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005142:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	f1c3 0205 	rsb	r2, r3, #5
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005152:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	68f9      	ldr	r1, [r7, #12]
 8005158:	69b8      	ldr	r0, [r7, #24]
 800515a:	f001 fd67 	bl	8006c2c <pxPortInitialiseStack>
 800515e:	4602      	mov	r2, r0
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005170:	bf00      	nop
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005180:	f001 fe82 	bl	8006e88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005184:	4b40      	ldr	r3, [pc, #256]	; (8005288 <prvAddNewTaskToReadyList+0x110>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	4a3f      	ldr	r2, [pc, #252]	; (8005288 <prvAddNewTaskToReadyList+0x110>)
 800518c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800518e:	4b3f      	ldr	r3, [pc, #252]	; (800528c <prvAddNewTaskToReadyList+0x114>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005196:	4a3d      	ldr	r2, [pc, #244]	; (800528c <prvAddNewTaskToReadyList+0x114>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800519c:	4b3a      	ldr	r3, [pc, #232]	; (8005288 <prvAddNewTaskToReadyList+0x110>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d110      	bne.n	80051c6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80051a4:	f000 fdee 	bl	8005d84 <prvInitialiseTaskLists>
 80051a8:	e00d      	b.n	80051c6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80051aa:	4b39      	ldr	r3, [pc, #228]	; (8005290 <prvAddNewTaskToReadyList+0x118>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051b2:	4b36      	ldr	r3, [pc, #216]	; (800528c <prvAddNewTaskToReadyList+0x114>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	429a      	cmp	r2, r3
 80051be:	d802      	bhi.n	80051c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80051c0:	4a32      	ldr	r2, [pc, #200]	; (800528c <prvAddNewTaskToReadyList+0x114>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80051c6:	4b33      	ldr	r3, [pc, #204]	; (8005294 <prvAddNewTaskToReadyList+0x11c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3301      	adds	r3, #1
 80051cc:	4a31      	ldr	r2, [pc, #196]	; (8005294 <prvAddNewTaskToReadyList+0x11c>)
 80051ce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <prvAddNewTaskToReadyList+0x11c>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	2201      	movs	r2, #1
 80051de:	409a      	lsls	r2, r3
 80051e0:	4b2d      	ldr	r3, [pc, #180]	; (8005298 <prvAddNewTaskToReadyList+0x120>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <prvAddNewTaskToReadyList+0x120>)
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ee:	492b      	ldr	r1, [pc, #172]	; (800529c <prvAddNewTaskToReadyList+0x124>)
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	3304      	adds	r3, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	60da      	str	r2, [r3, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	3204      	adds	r2, #4
 8005216:	605a      	str	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4a1b      	ldr	r2, [pc, #108]	; (800529c <prvAddNewTaskToReadyList+0x124>)
 800522e:	441a      	add	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	615a      	str	r2, [r3, #20]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	4918      	ldr	r1, [pc, #96]	; (800529c <prvAddNewTaskToReadyList+0x124>)
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1c59      	adds	r1, r3, #1
 8005248:	4814      	ldr	r0, [pc, #80]	; (800529c <prvAddNewTaskToReadyList+0x124>)
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4403      	add	r3, r0
 8005254:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005256:	f001 fe47 	bl	8006ee8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800525a:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <prvAddNewTaskToReadyList+0x118>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00e      	beq.n	8005280 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <prvAddNewTaskToReadyList+0x114>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	429a      	cmp	r2, r3
 800526e:	d207      	bcs.n	8005280 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <prvAddNewTaskToReadyList+0x128>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	200002e8 	.word	0x200002e8
 800528c:	20000210 	.word	0x20000210
 8005290:	200002f4 	.word	0x200002f4
 8005294:	20000304 	.word	0x20000304
 8005298:	200002f0 	.word	0x200002f0
 800529c:	20000214 	.word	0x20000214
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <xTaskDelayUntil+0x2a>
        __asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	617b      	str	r3, [r7, #20]
    }
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <xTaskDelayUntil+0x46>
        __asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	613b      	str	r3, [r7, #16]
    }
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80052ea:	4b2a      	ldr	r3, [pc, #168]	; (8005394 <xTaskDelayUntil+0xf0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <xTaskDelayUntil+0x64>
        __asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	60fb      	str	r3, [r7, #12]
    }
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8005308:	f000 f8d0 	bl	80054ac <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800530c:	4b22      	ldr	r3, [pc, #136]	; (8005398 <xTaskDelayUntil+0xf4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	4413      	add	r3, r2
 800531a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a3a      	ldr	r2, [r7, #32]
 8005322:	429a      	cmp	r2, r3
 8005324:	d20b      	bcs.n	800533e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	429a      	cmp	r2, r3
 800532e:	d211      	bcs.n	8005354 <xTaskDelayUntil+0xb0>
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	429a      	cmp	r2, r3
 8005336:	d90d      	bls.n	8005354 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8005338:	2301      	movs	r3, #1
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
 800533c:	e00a      	b.n	8005354 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	429a      	cmp	r2, r3
 8005346:	d303      	bcc.n	8005350 <xTaskDelayUntil+0xac>
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	429a      	cmp	r2, r3
 800534e:	d901      	bls.n	8005354 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8005350:	2301      	movs	r3, #1
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	d006      	beq.n	800536e <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2100      	movs	r1, #0
 8005368:	4618      	mov	r0, r3
 800536a:	f001 f95b 	bl	8006624 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800536e:	f000 f8ab 	bl	80054c8 <xTaskResumeAll>
 8005372:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 800537a:	4b08      	ldr	r3, [pc, #32]	; (800539c <xTaskDelayUntil+0xf8>)
 800537c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800538c:	4618      	mov	r0, r3
 800538e:	3728      	adds	r7, #40	; 0x28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000310 	.word	0x20000310
 8005398:	200002ec 	.word	0x200002ec
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d017      	beq.n	80053e2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80053b2:	4b13      	ldr	r3, [pc, #76]	; (8005400 <vTaskDelay+0x60>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <vTaskDelay+0x30>
        __asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60bb      	str	r3, [r7, #8]
    }
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80053d0:	f000 f86c 	bl	80054ac <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053d4:	2100      	movs	r1, #0
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f001 f924 	bl	8006624 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80053dc:	f000 f874 	bl	80054c8 <xTaskResumeAll>
 80053e0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <vTaskDelay+0x64>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000310 	.word	0x20000310
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800540e:	4b20      	ldr	r3, [pc, #128]	; (8005490 <vTaskStartScheduler+0x88>)
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	2300      	movs	r3, #0
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	2300      	movs	r3, #0
 8005418:	2282      	movs	r2, #130	; 0x82
 800541a:	491e      	ldr	r1, [pc, #120]	; (8005494 <vTaskStartScheduler+0x8c>)
 800541c:	481e      	ldr	r0, [pc, #120]	; (8005498 <vTaskStartScheduler+0x90>)
 800541e:	f7ff fdd7 	bl	8004fd0 <xTaskCreate>
 8005422:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d102      	bne.n	8005430 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800542a:	f001 f97b 	bl	8006724 <xTimerCreateTimerTask>
 800542e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d116      	bne.n	8005464 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	60bb      	str	r3, [r7, #8]
    }
 8005448:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <vTaskStartScheduler+0x94>)
 800544c:	f04f 32ff 	mov.w	r2, #4294967295
 8005450:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005452:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <vTaskStartScheduler+0x98>)
 8005454:	2201      	movs	r2, #1
 8005456:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005458:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <vTaskStartScheduler+0x9c>)
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800545e:	f001 fc71 	bl	8006d44 <xPortStartScheduler>
 8005462:	e00e      	b.n	8005482 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d10a      	bne.n	8005482 <vTaskStartScheduler+0x7a>
        __asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	607b      	str	r3, [r7, #4]
    }
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005482:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <vTaskStartScheduler+0xa0>)
 8005484:	681b      	ldr	r3, [r3, #0]
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	2000030c 	.word	0x2000030c
 8005494:	080074a8 	.word	0x080074a8
 8005498:	08005d55 	.word	0x08005d55
 800549c:	20000308 	.word	0x20000308
 80054a0:	200002f4 	.word	0x200002f4
 80054a4:	200002ec 	.word	0x200002ec
 80054a8:	2000000c 	.word	0x2000000c

080054ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <vTaskSuspendAll+0x18>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	4a03      	ldr	r2, [pc, #12]	; (80054c4 <vTaskSuspendAll+0x18>)
 80054b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80054ba:	bf00      	nop
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	20000310 	.word	0x20000310

080054c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80054d6:	4b71      	ldr	r3, [pc, #452]	; (800569c <xTaskResumeAll+0x1d4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	607b      	str	r3, [r7, #4]
    }
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80054f4:	f001 fcc8 	bl	8006e88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80054f8:	4b68      	ldr	r3, [pc, #416]	; (800569c <xTaskResumeAll+0x1d4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	4a67      	ldr	r2, [pc, #412]	; (800569c <xTaskResumeAll+0x1d4>)
 8005500:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005502:	4b66      	ldr	r3, [pc, #408]	; (800569c <xTaskResumeAll+0x1d4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 80c0 	bne.w	800568c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800550c:	4b64      	ldr	r3, [pc, #400]	; (80056a0 <xTaskResumeAll+0x1d8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80bb 	beq.w	800568c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005516:	e08a      	b.n	800562e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005518:	4b62      	ldr	r3, [pc, #392]	; (80056a4 <xTaskResumeAll+0x1dc>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	6a12      	ldr	r2, [r2, #32]
 800552e:	609a      	str	r2, [r3, #8]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	69d2      	ldr	r2, [r2, #28]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3318      	adds	r3, #24
 8005542:	429a      	cmp	r2, r3
 8005544:	d103      	bne.n	800554e <xTaskResumeAll+0x86>
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2200      	movs	r2, #0
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	68d2      	ldr	r2, [r2, #12]
 800556c:	609a      	str	r2, [r3, #8]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	6892      	ldr	r2, [r2, #8]
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	3304      	adds	r3, #4
 8005580:	429a      	cmp	r2, r3
 8005582:	d103      	bne.n	800558c <xTaskResumeAll+0xc4>
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	2200      	movs	r2, #0
 8005590:	615a      	str	r2, [r3, #20]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	2201      	movs	r2, #1
 80055a2:	409a      	lsls	r2, r3
 80055a4:	4b40      	ldr	r3, [pc, #256]	; (80056a8 <xTaskResumeAll+0x1e0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	4a3f      	ldr	r2, [pc, #252]	; (80056a8 <xTaskResumeAll+0x1e0>)
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	493e      	ldr	r1, [pc, #248]	; (80056ac <xTaskResumeAll+0x1e4>)
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	3304      	adds	r3, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	3204      	adds	r2, #4
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	609a      	str	r2, [r3, #8]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4a2e      	ldr	r2, [pc, #184]	; (80056ac <xTaskResumeAll+0x1e4>)
 80055f2:	441a      	add	r2, r3
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	615a      	str	r2, [r3, #20]
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	492b      	ldr	r1, [pc, #172]	; (80056ac <xTaskResumeAll+0x1e4>)
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	1c59      	adds	r1, r3, #1
 800560c:	4827      	ldr	r0, [pc, #156]	; (80056ac <xTaskResumeAll+0x1e4>)
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4403      	add	r3, r0
 8005618:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561e:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <xTaskResumeAll+0x1e8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	429a      	cmp	r2, r3
 8005626:	d302      	bcc.n	800562e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8005628:	4b22      	ldr	r3, [pc, #136]	; (80056b4 <xTaskResumeAll+0x1ec>)
 800562a:	2201      	movs	r2, #1
 800562c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800562e:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <xTaskResumeAll+0x1dc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f47f af70 	bne.w	8005518 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800563e:	f000 fc1f 	bl	8005e80 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005642:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <xTaskResumeAll+0x1f0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d010      	beq.n	8005670 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800564e:	f000 f847 	bl	80056e0 <xTaskIncrementTick>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005658:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <xTaskResumeAll+0x1ec>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	3b01      	subs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f1      	bne.n	800564e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800566a:	4b13      	ldr	r3, [pc, #76]	; (80056b8 <xTaskResumeAll+0x1f0>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005670:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <xTaskResumeAll+0x1ec>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005678:	2301      	movs	r3, #1
 800567a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800567c:	4b0f      	ldr	r3, [pc, #60]	; (80056bc <xTaskResumeAll+0x1f4>)
 800567e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800568c:	f001 fc2c 	bl	8006ee8 <vPortExitCritical>

    return xAlreadyYielded;
 8005690:	69bb      	ldr	r3, [r7, #24]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000310 	.word	0x20000310
 80056a0:	200002e8 	.word	0x200002e8
 80056a4:	200002a8 	.word	0x200002a8
 80056a8:	200002f0 	.word	0x200002f0
 80056ac:	20000214 	.word	0x20000214
 80056b0:	20000210 	.word	0x20000210
 80056b4:	200002fc 	.word	0x200002fc
 80056b8:	200002f8 	.word	0x200002f8
 80056bc:	e000ed04 	.word	0xe000ed04

080056c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <xTaskGetTickCount+0x1c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80056cc:	687b      	ldr	r3, [r7, #4]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	200002ec 	.word	0x200002ec

080056e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ea:	4b7d      	ldr	r3, [pc, #500]	; (80058e0 <xTaskIncrementTick+0x200>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 80ec 	bne.w	80058cc <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056f4:	4b7b      	ldr	r3, [pc, #492]	; (80058e4 <xTaskIncrementTick+0x204>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80056fc:	4a79      	ldr	r2, [pc, #484]	; (80058e4 <xTaskIncrementTick+0x204>)
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d120      	bne.n	800574a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005708:	4b77      	ldr	r3, [pc, #476]	; (80058e8 <xTaskIncrementTick+0x208>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <xTaskIncrementTick+0x48>
        __asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	607b      	str	r3, [r7, #4]
    }
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <xTaskIncrementTick+0x46>
 8005728:	4b6f      	ldr	r3, [pc, #444]	; (80058e8 <xTaskIncrementTick+0x208>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	4b6f      	ldr	r3, [pc, #444]	; (80058ec <xTaskIncrementTick+0x20c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6d      	ldr	r2, [pc, #436]	; (80058e8 <xTaskIncrementTick+0x208>)
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	4a6d      	ldr	r2, [pc, #436]	; (80058ec <xTaskIncrementTick+0x20c>)
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	4b6c      	ldr	r3, [pc, #432]	; (80058f0 <xTaskIncrementTick+0x210>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3301      	adds	r3, #1
 8005742:	4a6b      	ldr	r2, [pc, #428]	; (80058f0 <xTaskIncrementTick+0x210>)
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	f000 fb9b 	bl	8005e80 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800574a:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <xTaskIncrementTick+0x214>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6a3a      	ldr	r2, [r7, #32]
 8005750:	429a      	cmp	r2, r3
 8005752:	f0c0 80a6 	bcc.w	80058a2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005756:	4b64      	ldr	r3, [pc, #400]	; (80058e8 <xTaskIncrementTick+0x208>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d104      	bne.n	800576a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005760:	4b64      	ldr	r3, [pc, #400]	; (80058f4 <xTaskIncrementTick+0x214>)
 8005762:	f04f 32ff 	mov.w	r2, #4294967295
 8005766:	601a      	str	r2, [r3, #0]
                    break;
 8005768:	e09b      	b.n	80058a2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800576a:	4b5f      	ldr	r3, [pc, #380]	; (80058e8 <xTaskIncrementTick+0x208>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800577a:	6a3a      	ldr	r2, [r7, #32]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	429a      	cmp	r2, r3
 8005780:	d203      	bcs.n	800578a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005782:	4a5c      	ldr	r2, [pc, #368]	; (80058f4 <xTaskIncrementTick+0x214>)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005788:	e08b      	b.n	80058a2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	68d2      	ldr	r2, [r2, #12]
 8005798:	609a      	str	r2, [r3, #8]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	6892      	ldr	r2, [r2, #8]
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	3304      	adds	r3, #4
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d103      	bne.n	80057b8 <xTaskIncrementTick+0xd8>
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	605a      	str	r2, [r3, #4]
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2200      	movs	r2, #0
 80057bc:	615a      	str	r2, [r3, #20]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	1e5a      	subs	r2, r3, #1
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01e      	beq.n	800580e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	6a12      	ldr	r2, [r2, #32]
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	69d2      	ldr	r2, [r2, #28]
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	3318      	adds	r3, #24
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d103      	bne.n	80057fe <xTaskIncrementTick+0x11e>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	605a      	str	r2, [r3, #4]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2200      	movs	r2, #0
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	1e5a      	subs	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	2201      	movs	r2, #1
 8005814:	409a      	lsls	r2, r3
 8005816:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <xTaskIncrementTick+0x218>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4313      	orrs	r3, r2
 800581c:	4a36      	ldr	r2, [pc, #216]	; (80058f8 <xTaskIncrementTick+0x218>)
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4935      	ldr	r1, [pc, #212]	; (80058fc <xTaskIncrementTick+0x21c>)
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	440b      	add	r3, r1
 8005830:	3304      	adds	r3, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	609a      	str	r2, [r3, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	60da      	str	r2, [r3, #12]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	3204      	adds	r2, #4
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	1d1a      	adds	r2, r3, #4
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	609a      	str	r2, [r3, #8]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4a26      	ldr	r2, [pc, #152]	; (80058fc <xTaskIncrementTick+0x21c>)
 8005864:	441a      	add	r2, r3
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	615a      	str	r2, [r3, #20]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	4923      	ldr	r1, [pc, #140]	; (80058fc <xTaskIncrementTick+0x21c>)
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	1c59      	adds	r1, r3, #1
 800587e:	481f      	ldr	r0, [pc, #124]	; (80058fc <xTaskIncrementTick+0x21c>)
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4403      	add	r3, r0
 800588a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <xTaskIncrementTick+0x220>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	429a      	cmp	r2, r3
 8005898:	f67f af5d 	bls.w	8005756 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800589c:	2301      	movs	r3, #1
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058a0:	e759      	b.n	8005756 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058a2:	4b17      	ldr	r3, [pc, #92]	; (8005900 <xTaskIncrementTick+0x220>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	4914      	ldr	r1, [pc, #80]	; (80058fc <xTaskIncrementTick+0x21c>)
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d901      	bls.n	80058be <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80058ba:	2301      	movs	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <xTaskIncrementTick+0x224>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	e004      	b.n	80058d6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80058cc:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <xTaskIncrementTick+0x228>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	4a0d      	ldr	r2, [pc, #52]	; (8005908 <xTaskIncrementTick+0x228>)
 80058d4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20000310 	.word	0x20000310
 80058e4:	200002ec 	.word	0x200002ec
 80058e8:	200002a0 	.word	0x200002a0
 80058ec:	200002a4 	.word	0x200002a4
 80058f0:	20000300 	.word	0x20000300
 80058f4:	20000308 	.word	0x20000308
 80058f8:	200002f0 	.word	0x200002f0
 80058fc:	20000214 	.word	0x20000214
 8005900:	20000210 	.word	0x20000210
 8005904:	200002fc 	.word	0x200002fc
 8005908:	200002f8 	.word	0x200002f8

0800590c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005912:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <vTaskSwitchContext+0xa4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800591a:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <vTaskSwitchContext+0xa8>)
 800591c:	2201      	movs	r2, #1
 800591e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005920:	e03f      	b.n	80059a2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005922:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <vTaskSwitchContext+0xa8>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005928:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <vTaskSwitchContext+0xac>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	fab3 f383 	clz	r3, r3
 8005934:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005936:	7afb      	ldrb	r3, [r7, #11]
 8005938:	f1c3 031f 	rsb	r3, r3, #31
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	491f      	ldr	r1, [pc, #124]	; (80059bc <vTaskSwitchContext+0xb0>)
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	607b      	str	r3, [r7, #4]
    }
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <vTaskSwitchContext+0x5a>
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4a12      	ldr	r2, [pc, #72]	; (80059bc <vTaskSwitchContext+0xb0>)
 8005974:	4413      	add	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	605a      	str	r2, [r3, #4]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3308      	adds	r3, #8
 800598a:	429a      	cmp	r2, r3
 800598c:	d104      	bne.n	8005998 <vTaskSwitchContext+0x8c>
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <vTaskSwitchContext+0xb4>)
 80059a0:	6013      	str	r3, [r2, #0]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000310 	.word	0x20000310
 80059b4:	200002fc 	.word	0x200002fc
 80059b8:	200002f0 	.word	0x200002f0
 80059bc:	20000214 	.word	0x20000214
 80059c0:	20000210 	.word	0x20000210

080059c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	60fb      	str	r3, [r7, #12]
    }
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <vTaskPlaceOnEventList+0x44>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3318      	adds	r3, #24
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fe fccf 	bl	8004396 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059f8:	2101      	movs	r1, #1
 80059fa:	6838      	ldr	r0, [r7, #0]
 80059fc:	f000 fe12 	bl	8006624 <prvAddCurrentTaskToDelayedList>
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000210 	.word	0x20000210

08005a0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	613b      	str	r3, [r7, #16]
    }
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <vTaskPlaceOnEventListRestricted+0x88>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	61da      	str	r2, [r3, #28]
 8005a42:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <vTaskPlaceOnEventListRestricted+0x88>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	6892      	ldr	r2, [r2, #8]
 8005a4a:	621a      	str	r2, [r3, #32]
 8005a4c:	4b11      	ldr	r3, [pc, #68]	; (8005a94 <vTaskPlaceOnEventListRestricted+0x88>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	3218      	adds	r2, #24
 8005a56:	605a      	str	r2, [r3, #4]
 8005a58:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <vTaskPlaceOnEventListRestricted+0x88>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f103 0218 	add.w	r2, r3, #24
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <vTaskPlaceOnEventListRestricted+0x88>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a80:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	68b8      	ldr	r0, [r7, #8]
 8005a86:	f000 fdcd 	bl	8006624 <prvAddCurrentTaskToDelayedList>
    }
 8005a8a:	bf00      	nop
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000210 	.word	0x20000210

08005a98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b08b      	sub	sp, #44	; 0x2c
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60fb      	str	r3, [r7, #12]
    }
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	6a3a      	ldr	r2, [r7, #32]
 8005ad0:	6a12      	ldr	r2, [r2, #32]
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	69d2      	ldr	r2, [r2, #28]
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d103      	bne.n	8005af2 <xTaskRemoveFromEventList+0x5a>
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	6a1a      	ldr	r2, [r3, #32]
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	2200      	movs	r2, #0
 8005af6:	629a      	str	r2, [r3, #40]	; 0x28
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b02:	4b4a      	ldr	r3, [pc, #296]	; (8005c2c <xTaskRemoveFromEventList+0x194>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d15e      	bne.n	8005bc8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	6a3a      	ldr	r2, [r7, #32]
 8005b16:	68d2      	ldr	r2, [r2, #12]
 8005b18:	609a      	str	r2, [r3, #8]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	6a3a      	ldr	r2, [r7, #32]
 8005b20:	6892      	ldr	r2, [r2, #8]
 8005b22:	605a      	str	r2, [r3, #4]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d103      	bne.n	8005b38 <xTaskRemoveFromEventList+0xa0>
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	605a      	str	r2, [r3, #4]
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	615a      	str	r2, [r3, #20]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	1e5a      	subs	r2, r3, #1
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	409a      	lsls	r2, r3
 8005b50:	4b37      	ldr	r3, [pc, #220]	; (8005c30 <xTaskRemoveFromEventList+0x198>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	4a36      	ldr	r2, [pc, #216]	; (8005c30 <xTaskRemoveFromEventList+0x198>)
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5e:	4935      	ldr	r1, [pc, #212]	; (8005c34 <xTaskRemoveFromEventList+0x19c>)
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	609a      	str	r2, [r3, #8]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	6a3a      	ldr	r2, [r7, #32]
 8005b84:	3204      	adds	r2, #4
 8005b86:	605a      	str	r2, [r3, #4]
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	1d1a      	adds	r2, r3, #4
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4a25      	ldr	r2, [pc, #148]	; (8005c34 <xTaskRemoveFromEventList+0x19c>)
 8005b9e:	441a      	add	r2, r3
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	615a      	str	r2, [r3, #20]
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4922      	ldr	r1, [pc, #136]	; (8005c34 <xTaskRemoveFromEventList+0x19c>)
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	481e      	ldr	r0, [pc, #120]	; (8005c34 <xTaskRemoveFromEventList+0x19c>)
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4403      	add	r3, r0
 8005bc4:	6019      	str	r1, [r3, #0]
 8005bc6:	e01b      	b.n	8005c00 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <xTaskRemoveFromEventList+0x1a0>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	61da      	str	r2, [r3, #28]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	621a      	str	r2, [r3, #32]
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	6a3a      	ldr	r2, [r7, #32]
 8005be2:	3218      	adds	r2, #24
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f103 0218 	add.w	r2, r3, #24
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	4a11      	ldr	r2, [pc, #68]	; (8005c38 <xTaskRemoveFromEventList+0x1a0>)
 8005bf4:	629a      	str	r2, [r3, #40]	; 0x28
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <xTaskRemoveFromEventList+0x1a0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	4a0e      	ldr	r2, [pc, #56]	; (8005c38 <xTaskRemoveFromEventList+0x1a0>)
 8005bfe:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c04:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <xTaskRemoveFromEventList+0x1a4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d905      	bls.n	8005c1a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <xTaskRemoveFromEventList+0x1a8>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e001      	b.n	8005c1e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	372c      	adds	r7, #44	; 0x2c
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	20000310 	.word	0x20000310
 8005c30:	200002f0 	.word	0x200002f0
 8005c34:	20000214 	.word	0x20000214
 8005c38:	200002a8 	.word	0x200002a8
 8005c3c:	20000210 	.word	0x20000210
 8005c40:	200002fc 	.word	0x200002fc

08005c44 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <vTaskInternalSetTimeOutState+0x24>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <vTaskInternalSetTimeOutState+0x28>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	605a      	str	r2, [r3, #4]
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	20000300 	.word	0x20000300
 8005c6c:	200002ec 	.word	0x200002ec

08005c70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	613b      	str	r3, [r7, #16]
    }
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	60fb      	str	r3, [r7, #12]
    }
 8005cae:	bf00      	nop
 8005cb0:	e7fe      	b.n	8005cb0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005cb2:	f001 f8e9 	bl	8006e88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005cb6:	4b1f      	ldr	r3, [pc, #124]	; (8005d34 <xTaskCheckForTimeOut+0xc4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d102      	bne.n	8005cd6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	e026      	b.n	8005d24 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <xTaskCheckForTimeOut+0xc8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d00a      	beq.n	8005cf8 <xTaskCheckForTimeOut+0x88>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d305      	bcc.n	8005cf8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005cec:	2301      	movs	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e015      	b.n	8005d24 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d20b      	bcs.n	8005d1a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	1ad2      	subs	r2, r2, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ff98 	bl	8005c44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	e004      	b.n	8005d24 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005d24:	f001 f8e0 	bl	8006ee8 <vPortExitCritical>

    return xReturn;
 8005d28:	69fb      	ldr	r3, [r7, #28]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200002ec 	.word	0x200002ec
 8005d38:	20000300 	.word	0x20000300

08005d3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005d40:	4b03      	ldr	r3, [pc, #12]	; (8005d50 <vTaskMissedYield+0x14>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
}
 8005d46:	bf00      	nop
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	200002fc 	.word	0x200002fc

08005d54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005d5c:	f000 f852 	bl	8005e04 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <prvIdleTask+0x28>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d9f9      	bls.n	8005d5c <prvIdleTask+0x8>
            {
                taskYIELD();
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <prvIdleTask+0x2c>)
 8005d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005d78:	e7f0      	b.n	8005d5c <prvIdleTask+0x8>
 8005d7a:	bf00      	nop
 8005d7c:	20000214 	.word	0x20000214
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	e00c      	b.n	8005daa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <prvInitialiseTaskLists+0x60>)
 8005d9c:	4413      	add	r3, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe facc 	bl	800433c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3301      	adds	r3, #1
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	d9ef      	bls.n	8005d90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005db0:	480d      	ldr	r0, [pc, #52]	; (8005de8 <prvInitialiseTaskLists+0x64>)
 8005db2:	f7fe fac3 	bl	800433c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005db6:	480d      	ldr	r0, [pc, #52]	; (8005dec <prvInitialiseTaskLists+0x68>)
 8005db8:	f7fe fac0 	bl	800433c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005dbc:	480c      	ldr	r0, [pc, #48]	; (8005df0 <prvInitialiseTaskLists+0x6c>)
 8005dbe:	f7fe fabd 	bl	800433c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005dc2:	480c      	ldr	r0, [pc, #48]	; (8005df4 <prvInitialiseTaskLists+0x70>)
 8005dc4:	f7fe faba 	bl	800433c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005dc8:	480b      	ldr	r0, [pc, #44]	; (8005df8 <prvInitialiseTaskLists+0x74>)
 8005dca:	f7fe fab7 	bl	800433c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005dce:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <prvInitialiseTaskLists+0x78>)
 8005dd0:	4a05      	ldr	r2, [pc, #20]	; (8005de8 <prvInitialiseTaskLists+0x64>)
 8005dd2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <prvInitialiseTaskLists+0x7c>)
 8005dd6:	4a05      	ldr	r2, [pc, #20]	; (8005dec <prvInitialiseTaskLists+0x68>)
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000214 	.word	0x20000214
 8005de8:	20000278 	.word	0x20000278
 8005dec:	2000028c 	.word	0x2000028c
 8005df0:	200002a8 	.word	0x200002a8
 8005df4:	200002bc 	.word	0x200002bc
 8005df8:	200002d4 	.word	0x200002d4
 8005dfc:	200002a0 	.word	0x200002a0
 8005e00:	200002a4 	.word	0x200002a4

08005e04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e0a:	e019      	b.n	8005e40 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005e0c:	f001 f83c 	bl	8006e88 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e10:	4b10      	ldr	r3, [pc, #64]	; (8005e54 <prvCheckTasksWaitingTermination+0x50>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe faf3 	bl	8004408 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005e22:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <prvCheckTasksWaitingTermination+0x54>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	4a0b      	ldr	r2, [pc, #44]	; (8005e58 <prvCheckTasksWaitingTermination+0x54>)
 8005e2a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <prvCheckTasksWaitingTermination+0x58>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <prvCheckTasksWaitingTermination+0x58>)
 8005e34:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005e36:	f001 f857 	bl	8006ee8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f810 	bl	8005e60 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <prvCheckTasksWaitingTermination+0x58>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e1      	bne.n	8005e0c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	200002bc 	.word	0x200002bc
 8005e58:	200002e8 	.word	0x200002e8
 8005e5c:	200002d0 	.word	0x200002d0

08005e60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 f9a7 	bl	80071c0 <vPortFree>
            vPortFree( pxTCB );
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f001 f9a4 	bl	80071c0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <prvResetNextTaskUnblockTime+0x30>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d104      	bne.n	8005e98 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005e8e:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <prvResetNextTaskUnblockTime+0x34>)
 8005e90:	f04f 32ff 	mov.w	r2, #4294967295
 8005e94:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005e96:	e005      	b.n	8005ea4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <prvResetNextTaskUnblockTime+0x30>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a04      	ldr	r2, [pc, #16]	; (8005eb4 <prvResetNextTaskUnblockTime+0x34>)
 8005ea2:	6013      	str	r3, [r2, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	200002a0 	.word	0x200002a0
 8005eb4:	20000308 	.word	0x20000308

08005eb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <xTaskGetSchedulerState+0x34>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	e008      	b.n	8005ede <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ecc:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <xTaskGetSchedulerState+0x38>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	607b      	str	r3, [r7, #4]
 8005ed8:	e001      	b.n	8005ede <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005eda:	2300      	movs	r3, #0
 8005edc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005ede:	687b      	ldr	r3, [r7, #4]
    }
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	200002f4 	.word	0x200002f4
 8005ef0:	20000310 	.word	0x20000310

08005ef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 8087 	beq.w	800601a <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	4b44      	ldr	r3, [pc, #272]	; (8006024 <xTaskPriorityInherit+0x130>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d276      	bcs.n	8006008 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	db06      	blt.n	8005f30 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f22:	4b40      	ldr	r3, [pc, #256]	; (8006024 <xTaskPriorityInherit+0x130>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	f1c3 0205 	rsb	r2, r3, #5
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6959      	ldr	r1, [r3, #20]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4a39      	ldr	r2, [pc, #228]	; (8006028 <xTaskPriorityInherit+0x134>)
 8005f42:	4413      	add	r3, r2
 8005f44:	4299      	cmp	r1, r3
 8005f46:	d157      	bne.n	8005ff8 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe fa5b 	bl	8004408 <uxListRemove>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43da      	mvns	r2, r3
 8005f64:	4b31      	ldr	r3, [pc, #196]	; (800602c <xTaskPriorityInherit+0x138>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	4a30      	ldr	r2, [pc, #192]	; (800602c <xTaskPriorityInherit+0x138>)
 8005f6c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f6e:	4b2d      	ldr	r3, [pc, #180]	; (8006024 <xTaskPriorityInherit+0x130>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	409a      	lsls	r2, r3
 8005f80:	4b2a      	ldr	r3, [pc, #168]	; (800602c <xTaskPriorityInherit+0x138>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	4a29      	ldr	r2, [pc, #164]	; (800602c <xTaskPriorityInherit+0x138>)
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8e:	4926      	ldr	r1, [pc, #152]	; (8006028 <xTaskPriorityInherit+0x134>)
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	609a      	str	r2, [r3, #8]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	60da      	str	r2, [r3, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	3204      	adds	r2, #4
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1d1a      	adds	r2, r3, #4
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4a16      	ldr	r2, [pc, #88]	; (8006028 <xTaskPriorityInherit+0x134>)
 8005fce:	441a      	add	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	615a      	str	r2, [r3, #20]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	4913      	ldr	r1, [pc, #76]	; (8006028 <xTaskPriorityInherit+0x134>)
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	1c59      	adds	r1, r3, #1
 8005fe8:	480f      	ldr	r0, [pc, #60]	; (8006028 <xTaskPriorityInherit+0x134>)
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4403      	add	r3, r0
 8005ff4:	6019      	str	r1, [r3, #0]
 8005ff6:	e004      	b.n	8006002 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <xTaskPriorityInherit+0x130>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006002:	2301      	movs	r3, #1
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	e008      	b.n	800601a <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <xTaskPriorityInherit+0x130>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	429a      	cmp	r2, r3
 8006014:	d201      	bcs.n	800601a <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800601a:	697b      	ldr	r3, [r7, #20]
    }
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000210 	.word	0x20000210
 8006028:	20000214 	.word	0x20000214
 800602c:	200002f0 	.word	0x200002f0

08006030 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 808c 	beq.w	8006160 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006048:	4b48      	ldr	r3, [pc, #288]	; (800616c <xTaskPriorityDisinherit+0x13c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	429a      	cmp	r2, r3
 8006050:	d00a      	beq.n	8006068 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	613b      	str	r3, [r7, #16]
    }
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	60fb      	str	r3, [r7, #12]
    }
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608a:	1e5a      	subs	r2, r3, #1
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006098:	429a      	cmp	r2, r3
 800609a:	d061      	beq.n	8006160 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d15d      	bne.n	8006160 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	3304      	adds	r3, #4
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe f9ad 	bl	8004408 <uxListRemove>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	2201      	movs	r2, #1
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43da      	mvns	r2, r3
 80060c0:	4b2b      	ldr	r3, [pc, #172]	; (8006170 <xTaskPriorityDisinherit+0x140>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4013      	ands	r3, r2
 80060c6:	4a2a      	ldr	r2, [pc, #168]	; (8006170 <xTaskPriorityDisinherit+0x140>)
 80060c8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	f1c3 0205 	rsb	r2, r3, #5
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	2201      	movs	r2, #1
 80060e4:	409a      	lsls	r2, r3
 80060e6:	4b22      	ldr	r3, [pc, #136]	; (8006170 <xTaskPriorityDisinherit+0x140>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	4a20      	ldr	r2, [pc, #128]	; (8006170 <xTaskPriorityDisinherit+0x140>)
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	491f      	ldr	r1, [pc, #124]	; (8006174 <xTaskPriorityDisinherit+0x144>)
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	3304      	adds	r3, #4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	60da      	str	r2, [r3, #12]
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	3204      	adds	r2, #4
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	1d1a      	adds	r2, r3, #4
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	609a      	str	r2, [r3, #8]
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4a10      	ldr	r2, [pc, #64]	; (8006174 <xTaskPriorityDisinherit+0x144>)
 8006134:	441a      	add	r2, r3
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	615a      	str	r2, [r3, #20]
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613e:	490d      	ldr	r1, [pc, #52]	; (8006174 <xTaskPriorityDisinherit+0x144>)
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	1c59      	adds	r1, r3, #1
 800614e:	4809      	ldr	r0, [pc, #36]	; (8006174 <xTaskPriorityDisinherit+0x144>)
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4403      	add	r3, r0
 800615a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006160:	69fb      	ldr	r3, [r7, #28]
    }
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000210 	.word	0x20000210
 8006170:	200002f0 	.word	0x200002f0
 8006174:	20000214 	.word	0x20000214

08006178 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	; 0x28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006186:	2301      	movs	r3, #1
 8006188:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80a1 	beq.w	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	613b      	str	r3, [r7, #16]
    }
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d902      	bls.n	80061c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
 80061be:	e002      	b.n	80061c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061cc:	429a      	cmp	r2, r3
 80061ce:	f000 8081 	beq.w	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d17b      	bne.n	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80061dc:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x164>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6a3a      	ldr	r2, [r7, #32]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d10a      	bne.n	80061fc <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	60fb      	str	r3, [r7, #12]
    }
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	db04      	blt.n	800621a <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	f1c3 0205 	rsb	r2, r3, #5
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	6959      	ldr	r1, [r3, #20]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4a2d      	ldr	r2, [pc, #180]	; (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800622a:	4413      	add	r3, r2
 800622c:	4299      	cmp	r1, r3
 800622e:	d151      	bne.n	80062d4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	3304      	adds	r3, #4
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe f8e7 	bl	8004408 <uxListRemove>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	2201      	movs	r2, #1
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43da      	mvns	r2, r3
 800624c:	4b25      	ldr	r3, [pc, #148]	; (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4013      	ands	r3, r2
 8006252:	4a24      	ldr	r2, [pc, #144]	; (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8006254:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	2201      	movs	r2, #1
 800625c:	409a      	lsls	r2, r3
 800625e:	4b21      	ldr	r3, [pc, #132]	; (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4313      	orrs	r3, r2
 8006264:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626c:	491c      	ldr	r1, [pc, #112]	; (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	3304      	adds	r3, #4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	609a      	str	r2, [r3, #8]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	60da      	str	r2, [r3, #12]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	6a3a      	ldr	r2, [r7, #32]
 8006292:	3204      	adds	r2, #4
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	1d1a      	adds	r2, r3, #4
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	609a      	str	r2, [r3, #8]
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80062ac:	441a      	add	r2, r3
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	615a      	str	r2, [r3, #20]
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b6:	490a      	ldr	r1, [pc, #40]	; (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	1c59      	adds	r1, r3, #1
 80062c6:	4806      	ldr	r0, [pc, #24]	; (80062e0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4403      	add	r3, r0
 80062d2:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80062d4:	bf00      	nop
 80062d6:	3728      	adds	r7, #40	; 0x28
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20000210 	.word	0x20000210
 80062e0:	20000214 	.word	0x20000214
 80062e4:	200002f0 	.word	0x200002f0

080062e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80062ec:	4b07      	ldr	r3, [pc, #28]	; (800630c <pvTaskIncrementMutexHeldCount+0x24>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <pvTaskIncrementMutexHeldCount+0x24>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062fa:	3201      	adds	r2, #1
 80062fc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80062fe:	4b03      	ldr	r3, [pc, #12]	; (800630c <pvTaskIncrementMutexHeldCount+0x24>)
 8006300:	681b      	ldr	r3, [r3, #0]
    }
 8006302:	4618      	mov	r0, r3
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	20000210 	.word	0x20000210

08006310 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	613b      	str	r3, [r7, #16]
    }
 8006334:	bf00      	nop
 8006336:	e7fe      	b.n	8006336 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 8006338:	f000 fda6 	bl	8006e88 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800633c:	4b26      	ldr	r3, [pc, #152]	; (80063d8 <ulTaskGenericNotifyTake+0xc8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	3214      	adds	r2, #20
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d115      	bne.n	8006378 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800634c:	4b22      	ldr	r3, [pc, #136]	; (80063d8 <ulTaskGenericNotifyTake+0xc8>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	3354      	adds	r3, #84	; 0x54
 8006356:	2201      	movs	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006360:	2101      	movs	r1, #1
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f95e 	bl	8006624 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006368:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <ulTaskGenericNotifyTake+0xcc>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006378:	f000 fdb6 	bl	8006ee8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800637c:	f000 fd84 	bl	8006e88 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006380:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <ulTaskGenericNotifyTake+0xc8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	3214      	adds	r2, #20
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d012      	beq.n	80063ba <ulTaskGenericNotifyTake+0xaa>
            {
                if( xClearCountOnExit != pdFALSE )
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <ulTaskGenericNotifyTake+0x9a>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <ulTaskGenericNotifyTake+0xc8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	3214      	adds	r2, #20
 80063a2:	2100      	movs	r1, #0
 80063a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80063a8:	e007      	b.n	80063ba <ulTaskGenericNotifyTake+0xaa>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <ulTaskGenericNotifyTake+0xc8>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	1e51      	subs	r1, r2, #1
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	3214      	adds	r2, #20
 80063b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <ulTaskGenericNotifyTake+0xc8>)
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	3354      	adds	r3, #84	; 0x54
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80063c8:	f000 fd8e 	bl	8006ee8 <vPortExitCritical>

        return ulReturn;
 80063cc:	697b      	ldr	r3, [r7, #20]
    }
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000210 	.word	0x20000210
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	; 0x38
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80063ee:	2301      	movs	r3, #1
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <xTaskGenericNotify+0x2e>
        __asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	623b      	str	r3, [r7, #32]
    }
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xTaskGenericNotify+0x4a>
        __asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	61fb      	str	r3, [r7, #28]
    }
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800642e:	f000 fd2b 	bl	8006e88 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d006      	beq.n	8006446 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	3214      	adds	r2, #20
 800643e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006444:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4413      	add	r3, r2
 800644c:	3354      	adds	r3, #84	; 0x54
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4413      	add	r3, r2
 800645a:	3354      	adds	r3, #84	; 0x54
 800645c:	2202      	movs	r2, #2
 800645e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	2b04      	cmp	r3, #4
 8006464:	d83b      	bhi.n	80064de <xTaskGenericNotify+0xfe>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <xTaskGenericNotify+0x8c>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	080064fd 	.word	0x080064fd
 8006470:	08006481 	.word	0x08006481
 8006474:	0800649d 	.word	0x0800649d
 8006478:	080064b5 	.word	0x080064b5
 800647c:	080064c3 	.word	0x080064c3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	3214      	adds	r2, #20
 8006486:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	ea42 0103 	orr.w	r1, r2, r3
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	3214      	adds	r2, #20
 8006496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800649a:	e032      	b.n	8006502 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	3214      	adds	r2, #20
 80064a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	3214      	adds	r2, #20
 80064ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064b2:	e026      	b.n	8006502 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	3214      	adds	r2, #20
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064c0:	e01f      	b.n	8006502 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80064c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d006      	beq.n	80064d8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	3214      	adds	r2, #20
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80064d6:	e014      	b.n	8006502 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80064d8:	2300      	movs	r3, #0
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80064dc:	e011      	b.n	8006502 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80064de:	4b4c      	ldr	r3, [pc, #304]	; (8006610 <xTaskGenericNotify+0x230>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <xTaskGenericNotify+0x120>
        __asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	61bb      	str	r3, [r7, #24]
    }
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <xTaskGenericNotify+0x11a>
                    break;
 80064fc:	bf00      	nop
 80064fe:	e000      	b.n	8006502 <xTaskGenericNotify+0x122>

                    break;
 8006500:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006506:	2b01      	cmp	r3, #1
 8006508:	d17b      	bne.n	8006602 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006516:	68d2      	ldr	r2, [r2, #12]
 8006518:	609a      	str	r2, [r3, #8]
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006520:	6892      	ldr	r2, [r2, #8]
 8006522:	605a      	str	r2, [r3, #4]
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	3304      	adds	r3, #4
 800652c:	429a      	cmp	r2, r3
 800652e:	d103      	bne.n	8006538 <xTaskGenericNotify+0x158>
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	2200      	movs	r2, #0
 800653c:	615a      	str	r2, [r3, #20]
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	1e5a      	subs	r2, r3, #1
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	2201      	movs	r2, #1
 800654e:	409a      	lsls	r2, r3
 8006550:	4b30      	ldr	r3, [pc, #192]	; (8006614 <xTaskGenericNotify+0x234>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4313      	orrs	r3, r2
 8006556:	4a2f      	ldr	r2, [pc, #188]	; (8006614 <xTaskGenericNotify+0x234>)
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655e:	492e      	ldr	r1, [pc, #184]	; (8006618 <xTaskGenericNotify+0x238>)
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	3304      	adds	r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006574:	609a      	str	r2, [r3, #8]
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	60da      	str	r2, [r3, #12]
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006584:	3204      	adds	r2, #4
 8006586:	605a      	str	r2, [r3, #4]
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	1d1a      	adds	r2, r3, #4
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	609a      	str	r2, [r3, #8]
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <xTaskGenericNotify+0x238>)
 800659e:	441a      	add	r2, r3
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	615a      	str	r2, [r3, #20]
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a8:	491b      	ldr	r1, [pc, #108]	; (8006618 <xTaskGenericNotify+0x238>)
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	1c59      	adds	r1, r3, #1
 80065b8:	4817      	ldr	r0, [pc, #92]	; (8006618 <xTaskGenericNotify+0x238>)
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4403      	add	r3, r0
 80065c4:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <xTaskGenericNotify+0x204>
        __asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	617b      	str	r3, [r7, #20]
    }
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <xTaskGenericNotify+0x23c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d907      	bls.n	8006602 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80065f2:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <xTaskGenericNotify+0x240>)
 80065f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006602:	f000 fc71 	bl	8006ee8 <vPortExitCritical>

        return xReturn;
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8006608:	4618      	mov	r0, r3
 800660a:	3738      	adds	r7, #56	; 0x38
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	200002ec 	.word	0x200002ec
 8006614:	200002f0 	.word	0x200002f0
 8006618:	20000214 	.word	0x20000214
 800661c:	20000210 	.word	0x20000210
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800662e:	4b36      	ldr	r3, [pc, #216]	; (8006708 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006634:	4b35      	ldr	r3, [pc, #212]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3304      	adds	r3, #4
 800663a:	4618      	mov	r0, r3
 800663c:	f7fd fee4 	bl	8004408 <uxListRemove>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006646:	4b31      	ldr	r3, [pc, #196]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	2201      	movs	r2, #1
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	43da      	mvns	r2, r3
 8006654:	4b2e      	ldr	r3, [pc, #184]	; (8006710 <prvAddCurrentTaskToDelayedList+0xec>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4013      	ands	r3, r2
 800665a:	4a2d      	ldr	r2, [pc, #180]	; (8006710 <prvAddCurrentTaskToDelayedList+0xec>)
 800665c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d124      	bne.n	80066b0 <prvAddCurrentTaskToDelayedList+0x8c>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d021      	beq.n	80066b0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800666c:	4b29      	ldr	r3, [pc, #164]	; (8006714 <prvAddCurrentTaskToDelayedList+0xf0>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	4b26      	ldr	r3, [pc, #152]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	609a      	str	r2, [r3, #8]
 800667a:	4b24      	ldr	r3, [pc, #144]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	6892      	ldr	r2, [r2, #8]
 8006682:	60da      	str	r2, [r3, #12]
 8006684:	4b21      	ldr	r3, [pc, #132]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	3204      	adds	r2, #4
 800668e:	605a      	str	r2, [r3, #4]
 8006690:	4b1e      	ldr	r3, [pc, #120]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	1d1a      	adds	r2, r3, #4
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	609a      	str	r2, [r3, #8]
 800669a:	4b1c      	ldr	r3, [pc, #112]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <prvAddCurrentTaskToDelayedList+0xf0>)
 80066a0:	615a      	str	r2, [r3, #20]
 80066a2:	4b1c      	ldr	r3, [pc, #112]	; (8006714 <prvAddCurrentTaskToDelayedList+0xf0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <prvAddCurrentTaskToDelayedList+0xf0>)
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80066ae:	e026      	b.n	80066fe <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066b8:	4b14      	ldr	r3, [pc, #80]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d209      	bcs.n	80066dc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066c8:	4b13      	ldr	r3, [pc, #76]	; (8006718 <prvAddCurrentTaskToDelayedList+0xf4>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4b0f      	ldr	r3, [pc, #60]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7fd fe5e 	bl	8004396 <vListInsert>
}
 80066da:	e010      	b.n	80066fe <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <prvAddCurrentTaskToDelayedList+0xf8>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <prvAddCurrentTaskToDelayedList+0xe8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f7fd fe54 	bl	8004396 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80066ee:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <prvAddCurrentTaskToDelayedList+0xfc>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d202      	bcs.n	80066fe <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80066f8:	4a09      	ldr	r2, [pc, #36]	; (8006720 <prvAddCurrentTaskToDelayedList+0xfc>)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6013      	str	r3, [r2, #0]
}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200002ec 	.word	0x200002ec
 800670c:	20000210 	.word	0x20000210
 8006710:	200002f0 	.word	0x200002f0
 8006714:	200002d4 	.word	0x200002d4
 8006718:	200002a4 	.word	0x200002a4
 800671c:	200002a0 	.word	0x200002a0
 8006720:	20000308 	.word	0x20000308

08006724 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800672a:	2300      	movs	r3, #0
 800672c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800672e:	f000 fa47 	bl	8006bc0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006732:	4b11      	ldr	r3, [pc, #68]	; (8006778 <xTimerCreateTimerTask+0x54>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <xTimerCreateTimerTask+0x58>)
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	2302      	movs	r3, #2
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006748:	490d      	ldr	r1, [pc, #52]	; (8006780 <xTimerCreateTimerTask+0x5c>)
 800674a:	480e      	ldr	r0, [pc, #56]	; (8006784 <xTimerCreateTimerTask+0x60>)
 800674c:	f7fe fc40 	bl	8004fd0 <xTaskCreate>
 8006750:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	603b      	str	r3, [r7, #0]
    }
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800676e:	687b      	ldr	r3, [r7, #4]
    }
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000344 	.word	0x20000344
 800677c:	20000348 	.word	0x20000348
 8006780:	080074b0 	.word	0x080074b0
 8006784:	0800682d 	.word	0x0800682d

08006788 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006794:	e008      	b.n	80067a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4413      	add	r3, r2
 800679e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	699a      	ldr	r2, [r3, #24]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	18d1      	adds	r1, r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f8dd 	bl	8006974 <prvInsertTimerInActiveList>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1ea      	bne.n	8006796 <prvReloadTimer+0xe>
        }
    }
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <prvProcessExpiredTimer+0x5c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fd fe0f 	bl	8004408 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff ffc3 	bl	8006788 <prvReloadTimer>
 8006802:	e008      	b.n	8006816 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800680a:	f023 0301 	bic.w	r3, r3, #1
 800680e:	b2da      	uxtb	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	4798      	blx	r3
    }
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	2000033c 	.word	0x2000033c

0800682c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006834:	f107 0308 	add.w	r3, r7, #8
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f857 	bl	80068ec <prvGetNextExpireTime>
 800683e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4619      	mov	r1, r3
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f803 	bl	8006850 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800684a:	f000 f8d5 	bl	80069f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800684e:	e7f1      	b.n	8006834 <prvTimerTask+0x8>

08006850 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800685a:	f7fe fe27 	bl	80054ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800685e:	f107 0308 	add.w	r3, r7, #8
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f866 	bl	8006934 <prvSampleTimeNow>
 8006868:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d130      	bne.n	80068d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <prvProcessTimerOrBlockTask+0x3c>
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	429a      	cmp	r2, r3
 800687c:	d806      	bhi.n	800688c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800687e:	f7fe fe23 	bl	80054c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ffa1 	bl	80067cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800688a:	e024      	b.n	80068d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006892:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <prvProcessTimerOrBlockTask+0x90>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <prvProcessTimerOrBlockTask+0x50>
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <prvProcessTimerOrBlockTask+0x52>
 80068a0:	2300      	movs	r3, #0
 80068a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <prvProcessTimerOrBlockTask+0x94>)
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	4619      	mov	r1, r3
 80068b2:	f7fe fb59 	bl	8004f68 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80068b6:	f7fe fe07 	bl	80054c8 <xTaskResumeAll>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80068c0:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <prvProcessTimerOrBlockTask+0x98>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
    }
 80068d0:	e001      	b.n	80068d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80068d2:	f7fe fdf9 	bl	80054c8 <xTaskResumeAll>
    }
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000340 	.word	0x20000340
 80068e4:	20000344 	.word	0x20000344
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068f4:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <prvGetNextExpireTime+0x44>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <prvGetNextExpireTime+0x16>
 80068fe:	2201      	movs	r2, #1
 8006900:	e000      	b.n	8006904 <prvGetNextExpireTime+0x18>
 8006902:	2200      	movs	r2, #0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d105      	bne.n	800691c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <prvGetNextExpireTime+0x44>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e001      	b.n	8006920 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006920:	68fb      	ldr	r3, [r7, #12]
    }
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	2000033c 	.word	0x2000033c

08006934 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800693c:	f7fe fec0 	bl	80056c0 <xTaskGetTickCount>
 8006940:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006942:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <prvSampleTimeNow+0x3c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d205      	bcs.n	8006958 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800694c:	f000 f912 	bl	8006b74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	e002      	b.n	800695e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800695e:	4a04      	ldr	r2, [pc, #16]	; (8006970 <prvSampleTimeNow+0x3c>)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006964:	68fb      	ldr	r3, [r7, #12]
    }
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	2000034c 	.word	0x2000034c

08006974 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d812      	bhi.n	80069c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80069a8:	2301      	movs	r3, #1
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e01b      	b.n	80069e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069ae:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <prvInsertTimerInActiveList+0x7c>)
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3304      	adds	r3, #4
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f7fd fcec 	bl	8004396 <vListInsert>
 80069be:	e012      	b.n	80069e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d206      	bcs.n	80069d6 <prvInsertTimerInActiveList+0x62>
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80069d0:	2301      	movs	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e007      	b.n	80069e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <prvInsertTimerInActiveList+0x80>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3304      	adds	r3, #4
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f7fd fcd8 	bl	8004396 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80069e6:	697b      	ldr	r3, [r7, #20]
    }
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20000340 	.word	0x20000340
 80069f4:	2000033c 	.word	0x2000033c

080069f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069fe:	e0a6      	b.n	8006b4e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f2c0 80a3 	blt.w	8006b4e <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d004      	beq.n	8006a1e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	3304      	adds	r3, #4
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fd fcf5 	bl	8004408 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a1e:	1d3b      	adds	r3, r7, #4
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff ff87 	bl	8006934 <prvSampleTimeNow>
 8006a26:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	f200 808d 	bhi.w	8006b4c <prvProcessReceivedCommands+0x154>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <prvProcessReceivedCommands+0x40>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a5d 	.word	0x08006a5d
 8006a3c:	08006a5d 	.word	0x08006a5d
 8006a40:	08006ac5 	.word	0x08006ac5
 8006a44:	08006ad9 	.word	0x08006ad9
 8006a48:	08006b23 	.word	0x08006b23
 8006a4c:	08006a5d 	.word	0x08006a5d
 8006a50:	08006a5d 	.word	0x08006a5d
 8006a54:	08006ac5 	.word	0x08006ac5
 8006a58:	08006ad9 	.word	0x08006ad9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a62:	f043 0301 	orr.w	r3, r3, #1
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	18d1      	adds	r1, r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	69f8      	ldr	r0, [r7, #28]
 8006a7c:	f7ff ff7a 	bl	8006974 <prvInsertTimerInActiveList>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d063      	beq.n	8006b4e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	69f8      	ldr	r0, [r7, #28]
 8006aa2:	f7ff fe71 	bl	8006788 <prvReloadTimer>
 8006aa6:	e008      	b.n	8006aba <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aae:	f023 0301 	bic.w	r3, r3, #1
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	69f8      	ldr	r0, [r7, #28]
 8006ac0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006ac2:	e044      	b.n	8006b4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aca:	f023 0301 	bic.w	r3, r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006ad6:	e03a      	b.n	8006b4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	617b      	str	r3, [r7, #20]
    }
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	18d1      	adds	r1, r2, r3
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	69f8      	ldr	r0, [r7, #28]
 8006b1c:	f7ff ff2a 	bl	8006974 <prvInsertTimerInActiveList>
                        break;
 8006b20:	e015      	b.n	8006b4e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8006b30:	69f8      	ldr	r0, [r7, #28]
 8006b32:	f000 fb45 	bl	80071c0 <vPortFree>
 8006b36:	e00a      	b.n	8006b4e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006b4a:	e000      	b.n	8006b4e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006b4c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b4e:	4b08      	ldr	r3, [pc, #32]	; (8006b70 <prvProcessReceivedCommands+0x178>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f107 0108 	add.w	r1, r7, #8
 8006b56:	2200      	movs	r2, #0
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fd feb1 	bl	80048c0 <xQueueReceive>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f47f af4d 	bne.w	8006a00 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	3720      	adds	r7, #32
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000344 	.word	0x20000344

08006b74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b7a:	e009      	b.n	8006b90 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b7c:	4b0e      	ldr	r3, [pc, #56]	; (8006bb8 <prvSwitchTimerLists+0x44>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006b86:	f04f 31ff 	mov.w	r1, #4294967295
 8006b8a:	6838      	ldr	r0, [r7, #0]
 8006b8c:	f7ff fe1e 	bl	80067cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b90:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <prvSwitchTimerLists+0x44>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006b9a:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <prvSwitchTimerLists+0x44>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006ba0:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <prvSwitchTimerLists+0x48>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a04      	ldr	r2, [pc, #16]	; (8006bb8 <prvSwitchTimerLists+0x44>)
 8006ba6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006ba8:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <prvSwitchTimerLists+0x48>)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6013      	str	r3, [r2, #0]
    }
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	2000033c 	.word	0x2000033c
 8006bbc:	20000340 	.word	0x20000340

08006bc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006bc4:	f000 f960 	bl	8006e88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006bc8:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <prvCheckForValidListAndQueue+0x54>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d11d      	bne.n	8006c0c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006bd0:	4811      	ldr	r0, [pc, #68]	; (8006c18 <prvCheckForValidListAndQueue+0x58>)
 8006bd2:	f7fd fbb3 	bl	800433c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006bd6:	4811      	ldr	r0, [pc, #68]	; (8006c1c <prvCheckForValidListAndQueue+0x5c>)
 8006bd8:	f7fd fbb0 	bl	800433c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006bdc:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <prvCheckForValidListAndQueue+0x60>)
 8006bde:	4a0e      	ldr	r2, [pc, #56]	; (8006c18 <prvCheckForValidListAndQueue+0x58>)
 8006be0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006be2:	4b10      	ldr	r3, [pc, #64]	; (8006c24 <prvCheckForValidListAndQueue+0x64>)
 8006be4:	4a0d      	ldr	r2, [pc, #52]	; (8006c1c <prvCheckForValidListAndQueue+0x5c>)
 8006be6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006be8:	2200      	movs	r2, #0
 8006bea:	210c      	movs	r1, #12
 8006bec:	200a      	movs	r0, #10
 8006bee:	f7fd fcc5 	bl	800457c <xQueueGenericCreate>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4a07      	ldr	r2, [pc, #28]	; (8006c14 <prvCheckForValidListAndQueue+0x54>)
 8006bf6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006bf8:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <prvCheckForValidListAndQueue+0x54>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c00:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <prvCheckForValidListAndQueue+0x54>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4908      	ldr	r1, [pc, #32]	; (8006c28 <prvCheckForValidListAndQueue+0x68>)
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe f960 	bl	8004ecc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006c0c:	f000 f96c 	bl	8006ee8 <vPortExitCritical>
    }
 8006c10:	bf00      	nop
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000344 	.word	0x20000344
 8006c18:	20000314 	.word	0x20000314
 8006c1c:	20000328 	.word	0x20000328
 8006c20:	2000033c 	.word	0x2000033c
 8006c24:	20000340 	.word	0x20000340
 8006c28:	080074b8 	.word	0x080074b8

08006c2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3b04      	subs	r3, #4
 8006c3c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3b04      	subs	r3, #4
 8006c4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f023 0201 	bic.w	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3b04      	subs	r3, #4
 8006c5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006c5c:	4a0c      	ldr	r2, [pc, #48]	; (8006c90 <pxPortInitialiseStack+0x64>)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3b14      	subs	r3, #20
 8006c66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3b04      	subs	r3, #4
 8006c72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f06f 0202 	mvn.w	r2, #2
 8006c7a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3b20      	subs	r3, #32
 8006c80:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006c82:	68fb      	ldr	r3, [r7, #12]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	08006c95 	.word	0x08006c95

08006c94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006c9e:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <prvTaskExitError+0x54>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d00a      	beq.n	8006cbe <prvTaskExitError+0x2a>
        __asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	60fb      	str	r3, [r7, #12]
    }
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <prvTaskExitError+0x28>
        __asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60bb      	str	r3, [r7, #8]
    }
 8006cd0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006cd2:	bf00      	nop
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0fc      	beq.n	8006cd4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	20000010 	.word	0x20000010
 8006cec:	00000000 	.word	0x00000000

08006cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <pxCurrentTCBConst2>)
 8006cf2:	6819      	ldr	r1, [r3, #0]
 8006cf4:	6808      	ldr	r0, [r1, #0]
 8006cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	f380 8809 	msr	PSP, r0
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f04f 0000 	mov.w	r0, #0
 8006d06:	f380 8811 	msr	BASEPRI, r0
 8006d0a:	4770      	bx	lr
 8006d0c:	f3af 8000 	nop.w

08006d10 <pxCurrentTCBConst2>:
 8006d10:	20000210 	.word	0x20000210
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop

08006d18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006d18:	4808      	ldr	r0, [pc, #32]	; (8006d3c <prvPortStartFirstTask+0x24>)
 8006d1a:	6800      	ldr	r0, [r0, #0]
 8006d1c:	6800      	ldr	r0, [r0, #0]
 8006d1e:	f380 8808 	msr	MSP, r0
 8006d22:	f04f 0000 	mov.w	r0, #0
 8006d26:	f380 8814 	msr	CONTROL, r0
 8006d2a:	b662      	cpsie	i
 8006d2c:	b661      	cpsie	f
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	df00      	svc	0
 8006d38:	bf00      	nop
 8006d3a:	0000      	.short	0x0000
 8006d3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop

08006d44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d4a:	4b46      	ldr	r3, [pc, #280]	; (8006e64 <xPortStartScheduler+0x120>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a46      	ldr	r2, [pc, #280]	; (8006e68 <xPortStartScheduler+0x124>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d10a      	bne.n	8006d6a <xPortStartScheduler+0x26>
        __asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	613b      	str	r3, [r7, #16]
    }
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d6a:	4b3e      	ldr	r3, [pc, #248]	; (8006e64 <xPortStartScheduler+0x120>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a3f      	ldr	r2, [pc, #252]	; (8006e6c <xPortStartScheduler+0x128>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d10a      	bne.n	8006d8a <xPortStartScheduler+0x46>
        __asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	60fb      	str	r3, [r7, #12]
    }
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d8a:	4b39      	ldr	r3, [pc, #228]	; (8006e70 <xPortStartScheduler+0x12c>)
 8006d8c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	22ff      	movs	r2, #255	; 0xff
 8006d9a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	4b31      	ldr	r3, [pc, #196]	; (8006e74 <xPortStartScheduler+0x130>)
 8006db0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006db2:	4b31      	ldr	r3, [pc, #196]	; (8006e78 <xPortStartScheduler+0x134>)
 8006db4:	2207      	movs	r2, #7
 8006db6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006db8:	e009      	b.n	8006dce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8006dba:	4b2f      	ldr	r3, [pc, #188]	; (8006e78 <xPortStartScheduler+0x134>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	4a2d      	ldr	r2, [pc, #180]	; (8006e78 <xPortStartScheduler+0x134>)
 8006dc2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd6:	2b80      	cmp	r3, #128	; 0x80
 8006dd8:	d0ef      	beq.n	8006dba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dda:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <xPortStartScheduler+0x134>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f1c3 0307 	rsb	r3, r3, #7
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d00a      	beq.n	8006dfc <xPortStartScheduler+0xb8>
        __asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60bb      	str	r3, [r7, #8]
    }
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dfc:	4b1e      	ldr	r3, [pc, #120]	; (8006e78 <xPortStartScheduler+0x134>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	4a1d      	ldr	r2, [pc, #116]	; (8006e78 <xPortStartScheduler+0x134>)
 8006e04:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e06:	4b1c      	ldr	r3, [pc, #112]	; (8006e78 <xPortStartScheduler+0x134>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e0e:	4a1a      	ldr	r2, [pc, #104]	; (8006e78 <xPortStartScheduler+0x134>)
 8006e10:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006e1a:	4b18      	ldr	r3, [pc, #96]	; (8006e7c <xPortStartScheduler+0x138>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a17      	ldr	r2, [pc, #92]	; (8006e7c <xPortStartScheduler+0x138>)
 8006e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006e26:	4b15      	ldr	r3, [pc, #84]	; (8006e7c <xPortStartScheduler+0x138>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a14      	ldr	r2, [pc, #80]	; (8006e7c <xPortStartScheduler+0x138>)
 8006e2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006e32:	f000 f8db 	bl	8006fec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006e36:	4b12      	ldr	r3, [pc, #72]	; (8006e80 <xPortStartScheduler+0x13c>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006e3c:	f000 f8fa 	bl	8007034 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e40:	4b10      	ldr	r3, [pc, #64]	; (8006e84 <xPortStartScheduler+0x140>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a0f      	ldr	r2, [pc, #60]	; (8006e84 <xPortStartScheduler+0x140>)
 8006e46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006e4c:	f7ff ff64 	bl	8006d18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006e50:	f7fe fd5c 	bl	800590c <vTaskSwitchContext>
    prvTaskExitError();
 8006e54:	f7ff ff1e 	bl	8006c94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	e000ed00 	.word	0xe000ed00
 8006e68:	410fc271 	.word	0x410fc271
 8006e6c:	410fc270 	.word	0x410fc270
 8006e70:	e000e400 	.word	0xe000e400
 8006e74:	20000350 	.word	0x20000350
 8006e78:	20000354 	.word	0x20000354
 8006e7c:	e000ed20 	.word	0xe000ed20
 8006e80:	20000010 	.word	0x20000010
 8006e84:	e000ef34 	.word	0xe000ef34

08006e88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
        __asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	607b      	str	r3, [r7, #4]
    }
 8006ea0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006ea2:	4b0f      	ldr	r3, [pc, #60]	; (8006ee0 <vPortEnterCritical+0x58>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	4a0d      	ldr	r2, [pc, #52]	; (8006ee0 <vPortEnterCritical+0x58>)
 8006eaa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006eac:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <vPortEnterCritical+0x58>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d10f      	bne.n	8006ed4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <vPortEnterCritical+0x5c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <vPortEnterCritical+0x4c>
        __asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	603b      	str	r3, [r7, #0]
    }
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <vPortEnterCritical+0x4a>
    }
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	20000010 	.word	0x20000010
 8006ee4:	e000ed04 	.word	0xe000ed04

08006ee8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006eee:	4b12      	ldr	r3, [pc, #72]	; (8006f38 <vPortExitCritical+0x50>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <vPortExitCritical+0x24>
        __asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	607b      	str	r3, [r7, #4]
    }
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <vPortExitCritical+0x50>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <vPortExitCritical+0x50>)
 8006f14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006f16:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <vPortExitCritical+0x50>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d105      	bne.n	8006f2a <vPortExitCritical+0x42>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006f28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000010 	.word	0x20000010
 8006f3c:	00000000 	.word	0x00000000

08006f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006f40:	f3ef 8009 	mrs	r0, PSP
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <pxCurrentTCBConst>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	f01e 0f10 	tst.w	lr, #16
 8006f50:	bf08      	it	eq
 8006f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f64:	f380 8811 	msr	BASEPRI, r0
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f7fe fccc 	bl	800590c <vTaskSwitchContext>
 8006f74:	f04f 0000 	mov.w	r0, #0
 8006f78:	f380 8811 	msr	BASEPRI, r0
 8006f7c:	bc09      	pop	{r0, r3}
 8006f7e:	6819      	ldr	r1, [r3, #0]
 8006f80:	6808      	ldr	r0, [r1, #0]
 8006f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f86:	f01e 0f10 	tst.w	lr, #16
 8006f8a:	bf08      	it	eq
 8006f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f90:	f380 8809 	msr	PSP, r0
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst>:
 8006fa0:	20000210 	.word	0x20000210
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
        __asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	607b      	str	r3, [r7, #4]
    }
 8006fc0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006fc2:	f7fe fb8d 	bl	80056e0 <xTaskIncrementTick>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fcc:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <SysTick_Handler+0x40>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	f383 8811 	msr	BASEPRI, r3
    }
 8006fde:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <vPortSetupTimerInterrupt+0x34>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <vPortSetupTimerInterrupt+0x38>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <vPortSetupTimerInterrupt+0x3c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a0a      	ldr	r2, [pc, #40]	; (800702c <vPortSetupTimerInterrupt+0x40>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	099b      	lsrs	r3, r3, #6
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <vPortSetupTimerInterrupt+0x44>)
 800700a:	3b01      	subs	r3, #1
 800700c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800700e:	4b04      	ldr	r3, [pc, #16]	; (8007020 <vPortSetupTimerInterrupt+0x34>)
 8007010:	2207      	movs	r2, #7
 8007012:	601a      	str	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	e000e010 	.word	0xe000e010
 8007024:	e000e018 	.word	0xe000e018
 8007028:	20000000 	.word	0x20000000
 800702c:	10624dd3 	.word	0x10624dd3
 8007030:	e000e014 	.word	0xe000e014

08007034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007044 <vPortEnableVFP+0x10>
 8007038:	6801      	ldr	r1, [r0, #0]
 800703a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800703e:	6001      	str	r1, [r0, #0]
 8007040:	4770      	bx	lr
 8007042:	0000      	.short	0x0000
 8007044:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop

0800704c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007054:	2300      	movs	r3, #0
 8007056:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007058:	f7fe fa28 	bl	80054ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800705c:	4b53      	ldr	r3, [pc, #332]	; (80071ac <pvPortMalloc+0x160>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007064:	f000 f908 	bl	8007278 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d012      	beq.n	8007094 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800706e:	2208      	movs	r2, #8
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	3308      	adds	r3, #8
 800707a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	43db      	mvns	r3, r3
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d804      	bhi.n	8007090 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	4413      	add	r3, r2
 800708c:	607b      	str	r3, [r7, #4]
 800708e:	e001      	b.n	8007094 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	db70      	blt.n	800717c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d06d      	beq.n	800717c <pvPortMalloc+0x130>
 80070a0:	4b43      	ldr	r3, [pc, #268]	; (80071b0 <pvPortMalloc+0x164>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d868      	bhi.n	800717c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80070aa:	4b42      	ldr	r3, [pc, #264]	; (80071b4 <pvPortMalloc+0x168>)
 80070ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80070ae:	4b41      	ldr	r3, [pc, #260]	; (80071b4 <pvPortMalloc+0x168>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070b4:	e004      	b.n	80070c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d903      	bls.n	80070d2 <pvPortMalloc+0x86>
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1f1      	bne.n	80070b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80070d2:	4b36      	ldr	r3, [pc, #216]	; (80071ac <pvPortMalloc+0x160>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d8:	429a      	cmp	r2, r3
 80070da:	d04f      	beq.n	800717c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2208      	movs	r2, #8
 80070e2:	4413      	add	r3, r2
 80070e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	1ad2      	subs	r2, r2, r3
 80070f6:	2308      	movs	r3, #8
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d91f      	bls.n	800713e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00a      	beq.n	8007126 <pvPortMalloc+0xda>
        __asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	613b      	str	r3, [r7, #16]
    }
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	1ad2      	subs	r2, r2, r3
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007138:	6978      	ldr	r0, [r7, #20]
 800713a:	f000 f8f9 	bl	8007330 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800713e:	4b1c      	ldr	r3, [pc, #112]	; (80071b0 <pvPortMalloc+0x164>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <pvPortMalloc+0x164>)
 800714a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800714c:	4b18      	ldr	r3, [pc, #96]	; (80071b0 <pvPortMalloc+0x164>)
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	4b19      	ldr	r3, [pc, #100]	; (80071b8 <pvPortMalloc+0x16c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d203      	bcs.n	8007160 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <pvPortMalloc+0x164>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <pvPortMalloc+0x16c>)
 800715e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007172:	4b12      	ldr	r3, [pc, #72]	; (80071bc <pvPortMalloc+0x170>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3301      	adds	r3, #1
 8007178:	4a10      	ldr	r2, [pc, #64]	; (80071bc <pvPortMalloc+0x170>)
 800717a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800717c:	f7fe f9a4 	bl	80054c8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <pvPortMalloc+0x154>
        __asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	60fb      	str	r3, [r7, #12]
    }
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <pvPortMalloc+0x152>
    return pvReturn;
 80071a0:	69fb      	ldr	r3, [r7, #28]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3728      	adds	r7, #40	; 0x28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20012f60 	.word	0x20012f60
 80071b0:	20012f64 	.word	0x20012f64
 80071b4:	20012f58 	.word	0x20012f58
 80071b8:	20012f68 	.word	0x20012f68
 80071bc:	20012f6c 	.word	0x20012f6c

080071c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d049      	beq.n	8007266 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80071d2:	2308      	movs	r3, #8
 80071d4:	425b      	negs	r3, r3
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4413      	add	r3, r2
 80071da:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	db0a      	blt.n	80071fe <vPortFree+0x3e>
        __asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	60fb      	str	r3, [r7, #12]
    }
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <vPortFree+0x5c>
        __asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	60bb      	str	r3, [r7, #8]
    }
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	0fdb      	lsrs	r3, r3, #31
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01c      	beq.n	8007266 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d118      	bne.n	8007266 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007240:	f7fe f934 	bl	80054ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	4b09      	ldr	r3, [pc, #36]	; (8007270 <vPortFree+0xb0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4413      	add	r3, r2
 800724e:	4a08      	ldr	r2, [pc, #32]	; (8007270 <vPortFree+0xb0>)
 8007250:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007252:	6938      	ldr	r0, [r7, #16]
 8007254:	f000 f86c 	bl	8007330 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007258:	4b06      	ldr	r3, [pc, #24]	; (8007274 <vPortFree+0xb4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3301      	adds	r3, #1
 800725e:	4a05      	ldr	r2, [pc, #20]	; (8007274 <vPortFree+0xb4>)
 8007260:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007262:	f7fe f931 	bl	80054c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007266:	bf00      	nop
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20012f64 	.word	0x20012f64
 8007274:	20012f70 	.word	0x20012f70

08007278 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800727e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007282:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007284:	4b25      	ldr	r3, [pc, #148]	; (800731c <prvHeapInit+0xa4>)
 8007286:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00c      	beq.n	80072ac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3307      	adds	r3, #7
 8007296:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0307 	bic.w	r3, r3, #7
 800729e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	4a1d      	ldr	r2, [pc, #116]	; (800731c <prvHeapInit+0xa4>)
 80072a8:	4413      	add	r3, r2
 80072aa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072b0:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <prvHeapInit+0xa8>)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80072b6:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <prvHeapInit+0xa8>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	4413      	add	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80072c4:	2208      	movs	r2, #8
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f023 0307 	bic.w	r3, r3, #7
 80072d2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4a13      	ldr	r2, [pc, #76]	; (8007324 <prvHeapInit+0xac>)
 80072d8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <prvHeapInit+0xac>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2200      	movs	r2, #0
 80072e0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80072e2:	4b10      	ldr	r3, [pc, #64]	; (8007324 <prvHeapInit+0xac>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	1ad2      	subs	r2, r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072f8:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <prvHeapInit+0xac>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	4a08      	ldr	r2, [pc, #32]	; (8007328 <prvHeapInit+0xb0>)
 8007306:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	4a07      	ldr	r2, [pc, #28]	; (800732c <prvHeapInit+0xb4>)
 800730e:	6013      	str	r3, [r2, #0]
}
 8007310:	bf00      	nop
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	20000358 	.word	0x20000358
 8007320:	20012f58 	.word	0x20012f58
 8007324:	20012f60 	.word	0x20012f60
 8007328:	20012f68 	.word	0x20012f68
 800732c:	20012f64 	.word	0x20012f64

08007330 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007338:	4b28      	ldr	r3, [pc, #160]	; (80073dc <prvInsertBlockIntoFreeList+0xac>)
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e002      	b.n	8007344 <prvInsertBlockIntoFreeList+0x14>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	429a      	cmp	r2, r3
 800734c:	d8f7      	bhi.n	800733e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	4413      	add	r3, r2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	429a      	cmp	r2, r3
 800735e:	d108      	bne.n	8007372 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	441a      	add	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	441a      	add	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d118      	bne.n	80073b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <prvInsertBlockIntoFreeList+0xb0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d00d      	beq.n	80073ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	441a      	add	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	e008      	b.n	80073c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073ae:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <prvInsertBlockIntoFreeList+0xb0>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e003      	b.n	80073c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d002      	beq.n	80073ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80073ce:	bf00      	nop
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	20012f58 	.word	0x20012f58
 80073e0:	20012f60 	.word	0x20012f60

080073e4 <memset>:
 80073e4:	4402      	add	r2, r0
 80073e6:	4603      	mov	r3, r0
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d100      	bne.n	80073ee <memset+0xa>
 80073ec:	4770      	bx	lr
 80073ee:	f803 1b01 	strb.w	r1, [r3], #1
 80073f2:	e7f9      	b.n	80073e8 <memset+0x4>

080073f4 <__libc_init_array>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	4d0d      	ldr	r5, [pc, #52]	; (800742c <__libc_init_array+0x38>)
 80073f8:	4c0d      	ldr	r4, [pc, #52]	; (8007430 <__libc_init_array+0x3c>)
 80073fa:	1b64      	subs	r4, r4, r5
 80073fc:	10a4      	asrs	r4, r4, #2
 80073fe:	2600      	movs	r6, #0
 8007400:	42a6      	cmp	r6, r4
 8007402:	d109      	bne.n	8007418 <__libc_init_array+0x24>
 8007404:	4d0b      	ldr	r5, [pc, #44]	; (8007434 <__libc_init_array+0x40>)
 8007406:	4c0c      	ldr	r4, [pc, #48]	; (8007438 <__libc_init_array+0x44>)
 8007408:	f000 f826 	bl	8007458 <_init>
 800740c:	1b64      	subs	r4, r4, r5
 800740e:	10a4      	asrs	r4, r4, #2
 8007410:	2600      	movs	r6, #0
 8007412:	42a6      	cmp	r6, r4
 8007414:	d105      	bne.n	8007422 <__libc_init_array+0x2e>
 8007416:	bd70      	pop	{r4, r5, r6, pc}
 8007418:	f855 3b04 	ldr.w	r3, [r5], #4
 800741c:	4798      	blx	r3
 800741e:	3601      	adds	r6, #1
 8007420:	e7ee      	b.n	8007400 <__libc_init_array+0xc>
 8007422:	f855 3b04 	ldr.w	r3, [r5], #4
 8007426:	4798      	blx	r3
 8007428:	3601      	adds	r6, #1
 800742a:	e7f2      	b.n	8007412 <__libc_init_array+0x1e>
 800742c:	080074e0 	.word	0x080074e0
 8007430:	080074e0 	.word	0x080074e0
 8007434:	080074e0 	.word	0x080074e0
 8007438:	080074e4 	.word	0x080074e4

0800743c <memcpy>:
 800743c:	440a      	add	r2, r1
 800743e:	4291      	cmp	r1, r2
 8007440:	f100 33ff 	add.w	r3, r0, #4294967295
 8007444:	d100      	bne.n	8007448 <memcpy+0xc>
 8007446:	4770      	bx	lr
 8007448:	b510      	push	{r4, lr}
 800744a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800744e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007452:	4291      	cmp	r1, r2
 8007454:	d1f9      	bne.n	800744a <memcpy+0xe>
 8007456:	bd10      	pop	{r4, pc}

08007458 <_init>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	bf00      	nop
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr

08007464 <_fini>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	bf00      	nop
 8007468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746a:	bc08      	pop	{r3}
 800746c:	469e      	mov	lr, r3
 800746e:	4770      	bx	lr
